#!Maple
# Describe an eta product by vector of tuples (spread,power)
# 2023-01-17, Georg Fischer
with(StringTools):
toString:= proc(expr) DeleteSpace(convert(expr, string)) end:
etaprod:= proc(aseqno, cc, offset, prod, pqf, init, factor) 
  local expr,i,spread,expon,part,opp,p1,f1,list:
  list := [];
  try
    expr:= expand(prod);
    for i from 1 to nops(expr) do;
      spread := 1;
      expon := 1;
      part := op(i,expr);
      opp := op(0,part);
      if opp = `^` then p1 := op(1,part); expon := op(2, part) else p1 := part fi;
      f1 := op(1,p1); 
      if nops(f1) = 2 then spread := op(2, f1) fi; 
      # print([spread,expon]);
      list := [op(list), [spread,expon]];
    od:
    printf("%a\t%a\t%a\t%s\t%s\t%a\t%a\t%a\n", aseqno, cc, offset, toString(list), pqf, init, factor, prod);
  catch:
    printf("# %a failed: %q\n", aseqno, lastexception):
    error
  end try
end;
# trace(etaprod);
# etaprod(A260675, procname, x, eta(q^4)^2*eta(q^30)^5/(eta(q^2)*eta(q^15)^2*eta(q^60)^2), "-1/1", ", 1", "1");

timelimit($(TIMEOUT), etaprod($(PARM0), $(PARM1), $(PARM2), $(PARM3), $(PARM4), $(PARM5), $(PARM6)));

