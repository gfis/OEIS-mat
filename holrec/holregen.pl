#!perl

# Regenerate parameters for HolonomicRecurrence from jOEIS source files
# @(#) $Id$
# 2019-12-22, Georg Fischer
#
#:# Usage:
#:#   perl holregen.pl aseqnos.lst > holregen.tmp
#---------------------------------
use strict;
use integer;
use warnings;
my $version = "V1.1";
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime (time);
my $timestamp = sprintf ("%04d-%02d-%02d %02d:%02d:%02d"
        , $year + 1900, $mon + 1, $mday, $hour, $min, $sec);

my $srcpath = "../../joeis/src/irvine/oeis";
my $debug  = 0;
my $ainit  = 0; # additional initial terms
while (scalar(@ARGV) > 0 and ($ARGV[0] =~ m{\A[\-\+]})) {
    my $opt = shift(@ARGV);
    if (0) {
    } elsif ($opt  =~ m{a}) {
        $ainit  = shift(@ARGV);
    } elsif ($opt  =~ m{d}) {
        $debug  = shift(@ARGV);
    } else {
        die "invalid option \"$opt\"\n";
    }
} # while $opt

while (<>) {
    if (m{\A(A\d+)\s*(\w+)}) { # starts with A-number superclass
        my $aseqno     = $1;
        my $superclass = $2;
        &check($aseqno, $superclass);
    } # if starts with A-number
} # while <>

sub check {
    my ($aseqno, $superclass) = @_;
    my $group = lc(substr($aseqno, 0, 4));
    my $filename = "$srcpath/$group/$aseqno.java";
    open(SRC, "<", $filename) or die "cannot read \"$filename\"\n";
    my @lines  = ();
    my $lstart = -1;
    my $super  = "";
    my $author = "";
    while (<SRC>) {
        my $line = $_;
        $line =~ s{\s+\Z}{}; # chompr
        push(@lines, $line);
        if (0) {
        } elsif ($line =~ m{super\s*\((.*)}) {
            $lstart = scalar(@lines) - 1;
            $super  = $1;
        } elsif ($line =~ m{\@author\s+(.*)}) {
            $author = $1;
        }
    } # while <SRC> 
    close(SRC);
    if (0) {
    } elsif ($author =~ m{Sean} ) {
        $author = "sair";
    } elsif ($author =~ m{Georg}) {
        $author = "gfis";
    } else { 
        $author = "undef";
    }
    while ($super !~ m{\;}) { # super() not terminated
        $lstart ++;
        $super .= $lines[$lstart];
    } # while $super
    if ($super !~ m{ring|polynomial|create|den}i) { # not manually modified
        $super =~ s{\s}{}g;
        $super =~ s{super\(}{};
        $super =~ s{\)\;}{};
        $super =~ s{new\s*(long|Z)\[\]\s*}{}g;
        $super =~ s{Z\.valueOf\((\-?\d+)\)}{$1}g;
        $super =~ s{new\s*Z\(\"(\-?\d+)\"\)}{$1}g;
        $super =~ s{L}{}g; # no long constants
        if (0) { # switch for superclass
        } elsif ($superclass =~ m{^Linear}) {
            $super =~ s{\}\,\s*\{}{\t};
            $super =~ s{\,\s*\{}{\t};
            $super =~ s{\}\s*\Z}{};
            $super =~ s{\A\{\s*}{};
            $super = "0\t$super";
        } elsif ($superclass =~ m{^Gener} ) {
            $super =~ s{\}\,\s*\{}{\t};
            $super =~ s{\,\s*\{}{\t};
            $super =~ s{\}\s*\Z}{};
            $super =~ s{\A\{\s*}{};
            $super = "0\t$super";
        } elsif ($superclass =~ m{^Holo}  ) {
            $super =~ s{\"\,\s*\"}{\t};
            $super =~ s{\,\s*\"}{\t};
            $super =~ s{\"\,\s*}{\t};
        }
        print join("\t", ($aseqno, $super, $superclass, $author)) . "\n";
    } # not manually modified
} # check
__DATA__
#---------------------------------
package irvine.oeis.a029;

import irvine.oeis.LinearRecurrence;

/**
 * A029239 Expansion of <code>1/((1-x^2)*(1-x^8)*(1-x^10)*(1-x^11))</code>.
 * @author Sean A. Irvine
 */
public class A029239 extends LinearRecurrence {

  /** Construct the sequence. */
  public A029239() {
    super(new long[] {-1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, -1, -1, 0, 0, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0}, new long[] {1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 3, 1, 3, 1, 3, 1, 4, 1, 5, 2, 6, 3, 7, 3, 8, 3, 9, 4, 10, 5, 12});
  }
}
#---------------------------------
package irvine.oeis.a029;
// Generated by gen_pattern.pl - DO NOT EDIT here!

import irvine.oeis.GeneratingFunctionSequence;

/**
 * A029241 Expansion of <code>1/((1-x^2)*(1-x^9)*(1-x^10)*(1-x^11))</code>.
 * @author Georg Fischer
 */
public class A029241 extends GeneratingFunctionSequence {

  /** Construct the sequence. */
  public A029241() {
    super(0, new long[] {1},
      new long[] {1, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 1, 1, 0, 0, 0, 0, 
      0, 1, 1, 0, -1, -1, 0, 0, 0, 0, 0, 0, -1, 0, 1});
  }
}

#----------------------
package irvine.oeis.a116;
// Generated by gen_seq4.pl holos [0,-2,5,-4,1] [0,2,9,25] 0 at 2019-12-17 15:30
// DO NOT EDIT here!

import irvine.oeis.HolonomicRecurrence;

/**
 * A116454 Smallest m such that <code>A116452(m) = n</code>.
 * @author Georg Fischer
 */
public class A116454 extends HolonomicRecurrence {

  /** Construct the sequence. */
  public A116454() {
    super(1, "[0,-2,5,-4,1]", "[0,2,9,25]", 0);
  }
}
#---------------------------------
