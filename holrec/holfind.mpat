#!Maple 
# Guess a recurrence from a term list
# 2021-06-04, Georg Fischer
interface(prettyprint=0):
read "C://Users/User/work/gits/OEIS-mat/software/SCHUTZENBERGER-gfis.txt";
with(StringTools):
toString:=proc(expr) DeleteSpace(convert(expr,string)) end:
findit := proc(aseqno, offset, list); local list2, skip, rec, rord, ope, A, n, k, str, j;
  skip:= 2;
  list2:=[seq(list[i],i=skip..nops(list))];
  ope:=Findrec(list2,n,A,10):
  rord:=degree(ope,A):
  ope:=add(coeff(ope,A,j)*A^j,j=0..rord):
  ope:=eval(ope, n = n-skip): # shift to make DIST=0
# if coeff(coeff(ope,A,rord),n,degree(coeff(ope,A,rord))) >= 0 then ope:= -1*ope fi:
  ( [[0], seq([if coeff(ope,A,j) = 0 then 0 else seq(coeff(coeff(ope,A,j),n,k),k=0..degree(coeff(ope,A,j)))  end if],j=0..rord) ] # matrix
  , [seq(list[j], j=1..rord) ] # inits
  , 0   # dist
  , ope # remark
  )
  end:
holfind:=proc(aseqno, offset, dummy, list); local parms, matrix, inits, dist, remark;
  # printf("# parms: %a %a %a %a\n", aseqno, offset, dummy, list);
  parms := findit(aseqno, offset, list);
  matrix:= toString(parms[1]);
  inits := toString(parms[2]);
  dist  :=          parms[3];
  remark:= toString(parms[4]);
  printf("%a\tholos\t%a\t%s\t%s\t%a\t0\t%s\n", aseqno, offset, matrix, inits, dist, remark);
  printf("# make runholo OFF=%a MATRIX=\"%s\" INIT=\"%s\" DIST=%a\n", offset, matrix, inits, dist);
  end:
# holfind(A000045, 0, [[0]], [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]);

timelimit($(TIMEOUT), holfind($(PARM0), $(PARM2), $(PARM3), [$(PARM4)]));


holfind(A259627, 0, [[0]], [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 17, 18, 19, 28, 29, 30, 46, 47, 48, 75, 76, 77, 122, 123, 124, 198, 199, 200, 321, 322, 323, 520, 521, 522, 842, 843, 844, 1363, 1364, 1365, 2206, 2207, 2208, 3570, 3571, 3572, 5777, 5778, 5779, 9348, 9349, 9350, 15126, 15127, 15128, 24475, 24476, 24477,  39602, 39603, 39604, 64078, 64079, 64080, 103681, 103682, 103683, 167760, 167761,  167762, 271442, 271443, 271444, 439203, 439204, 439205, 710646, 710647, 710648,  1149850, 1149851, 1149852, 1860497, 1860498, 1860499, 3010348, 3010349, 3010350,  4870846, 4870847, 4870848, 7881195, 7881196, 7881197, 12752042, 12752043,  12752044, 20633238, 20633239, 20633240, 33385281, 33385282, 33385283, 54018520,  54018521, 54018522, 87403802, 87403803, 87403804, 141422323, 141422324,  141422325, 228826126, 228826127, 228826128, 370248450, 370248451, 370248452,  599074577, 599074578, 599074579, 969323028, 969323029, 969323030, 1568397606,  1568397607, 1568397608, 2537720635, 2537720636]);
