#!perl

# Convert DelÃ©ham's DELTA operator with finite operands to a fraction of 2 bivariate polynomials
# @(#) $Id$
# 2019-11-09, Georg Fischer
#
#:# Usage:
#:#   perl delta_pfract.pl dde_joeis.tmp > outfile
#---------------------------------
use strict;
use integer;
use warnings;
my $version = "V1.1";
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime (time);
my $timestamp = sprintf ("%04d-%02d-%02d %02d:%02d:%02d"
        , $year + 1900, $mon + 1, $mday, $hour, $min, $sec);

my $debug  = 0;
while (scalar(@ARGV) > 0 and ($ARGV[0] =~ m{\A[\-\+]})) {
    my $opt = shift(@ARGV);
    if (0) {
    } elsif ($opt  =~ m{d}) {
        $debug  = shift(@ARGV);
    } else {
        die "invalid option \"$opt\"\n";
    }
} # while $opt

print "# Generated by OEIS-mat/linrec/delta_pfract.pl on $timestamp\n";
while (<>) {
    next if ! m{\AA\d};
    s{\s+\Z}{}; # chompr
    my ($aseqno, $superclass, $delta_oper) = split(/\t/);
    my ($rlist, $slist) = map {
        s{[\[\]]}{}g;
        s{\(\,0\)\*}{,0,0,0,0,0,0,0,0};
        $_
        } split(/ DELTA /, $delta_oper);
    my @rarr = split(/\,/, $rlist);
    my @sarr = split(/\,/, $slist);
    my $ind = 0;
    my $cf0 = "1/(1";
    my $cf1 = ")";
    while ($ind < scalar(@rarr) and $ind < scalar(@sarr) and 
            (($rarr[$ind] !~ m{\A0\Z}) or ($sarr[$ind]  !~ m{\A0\Z}))) {
        $cf0 .= "- ("; 
        if ($rarr[$ind] !~ m{\A0\Z}) {
        	$cf0 .= "$rarr[$ind]*x";
        }
        if ($sarr[$ind] !~ m{\A0\Z}) {
        	$cf0 .= " + $sarr[$ind]*x*y";
        }
        $cf0 .= ")/(1";
        $cf1 .= ")";
        $ind ++;
    } # while $ind
    $cf0 .= $cf1;
    $cf0 =~ s{ }{}g;
    $cf0 =~ s{\+\-}{\-}g;
    $cf0 =~ s{\/\(1\)}{}g;
    print "$aseqno\tdelta\t0\t$cf0\n";
} # while <>
#--------------------
__DATA__
aseqno	superclass	info
A003506	Sequence	[2,-1/2,1/2(,0)*] DELTA [2,-1/2,1/2(,0)*]
A007318	Sequence	[1(,0)*] DELTA [1(,0)*]
A008288	MemoryFunction2	[1,0,1,-1(,0)*] DELTA [0,1(,0)*]
A010054	Sequence	[1(,0)*] DELTA [0(,0)*]
A011973	Sequence	[1(,0)*] DELTA [0,1,-1(,0)*]
A016095	A000045	[1,1,-1(,0)*] DELTA [1,1,-1(,0)*]
A023531	A010054	[0(,0)*] DELTA [1(,0)*]
A026729	Sequence	[0,1,-1(,0)*] DELTA [1(,0)*]
A027465	null	[3(,0)*] DELTA [1(,0)*]
A028297	null	[1,1(,0)*] DELTA [0,-1,1(,0)*]
A029600	null	[2,-1(,0)*] DELTA [3,-2(,0)*]
A029618	null	[3,-2(,0)*] DELTA [2,-1(,0)*]
A029635	null	[1(,0)*] DELTA [2,-1(,0)*]
A029653	null	[2,-1(,0)*] DELTA [1(,0)*]
A030523	null	[0,3,-1/3,4/3(,0)*] DELTA [1(,0)*]
A034839	null	[1,0,1(,0)*] DELTA [0,1,-1(,0)*]

# A003506 1/(1-(2*x+2*x*y)/(1-(-1/2*x-1/2*x*y)/(1-(1/2*x+1/2*x*y)/(1))))
# A007318 1/(1-(1*x+1*x*y)/(1))
# A008288 1/(1-(1*x)/(1-(+1*x*y)/(1-(1*x)/(1-(-1*x)/(1)))))
# A010054 1/(1-(1*x)/(1))
# A011973 1/(1-(1*x)/(1-(+1*x*y)/(1-(-1*x*y)/(1))))
# A016095 1/(1-(1*x+1*x*y)/(1-(1*x+1*x*y)/(1-(-1*x-1*x*y)/(1))))
# A023531 1/(1-(+1*x*y)/(1))
# A026729 1/(1-(+1*x*y)/(1-(1*x)/(1-(-1*x)/(1))))
# A027465 1/(1-(3*x+1*x*y)/(1))
# A028297 1/(1-(1*x)/(1-(1*x-1*x*y)/(1-(+1*x*y)/(1))))
