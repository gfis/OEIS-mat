#!perl

# Get the OEIS history for keywords "new", "changed" or "recycled"
# @(#) $Id$
# 2019-01-17: Georg Fischer, copied from ../broken_link/brol_process.pl
#
# Usage:
#   perl history.pl (-c name|-g (new|changed)|-r) [-w s] [outputdir]
#       -c    generate CREATE SQL for name
#       -g kw get blocks of 10 sequences, for keyword kw (deefault "new")
#       -r    generate *.tsv file for table loading
#       -w    wait time in seconds (default 16)
#------------------------------------
use strict;
use warnings;
use LWP;
use LWP::UserAgent;
use LWP::RobotUA;
use HTTP::Request::Common;

my $TIMESTAMP  = &iso_time(time());
my $debug      = 0;
my $action     = "g";
my $keyword    = "new";
my $blocksize  = 10; # fixed by OEIS server
my $wait       = 16; # wait time in seconds
while (scalar(@ARGV) > 0 and ($ARGV[0] =~ m{\A\-})) {
    my $opt = shift(@ARGV);
    if (0) {
    } elsif ($opt  =~ m{c}) {
        $action    =   "c";
    } elsif ($opt  =~ m{d}) {
        $debug     = shift(@ARGV);
    } elsif ($opt  =~ m{g}) {
        $action    =  $opt;
        $keyword   = shift(@ARGV);
    } elsif ($opt  =~ m{r}) {
        $action    =   "r";
    } elsif ($opt  =~ m{w}) {
        $wait      =  shift(@ARGV);
    } else {
        die "invalid option \"$opt\"\n";
    }
} # while $opt

my $outdir = substr($TIMESTAMP, 0, 10);
if (scalar(@ARGV) > 0) {
	$outdir = shift(@ARGV);
}
print `mkdir $outdir`;
#----------------
my  ( $linetype
    , $aseqno
    , $key2
    , $prefix
    , $protocol
    , $host
    , $noccur
    , $port
    , $path
    , $filename
    , $content
    , $status
    , $access
    , $replurl
    );
my  @fields = qw(
      linetype   VARCHAR(2)
      aseqno     VARCHAR(8)
      key2       VARCHAR(4)
      prefix     VARCHAR(128)
      protocol   VARCHAR(8)
      host       VARCHAR(64)
      port       VARCHAR(8)
      path       VARCHAR(512)
      filename   VARCHAR(512)
      content    VARCHAR(512)
      status     VARCHAR(32)
      access     TIMESTAMP
      replurl    VARCHAR(512)
    );
my $letters = "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
$linetype = "%H";
my $tabname;
if (0) {
#-------------------------------------------------------------
} elsif ($action =~ m{g}) { # get blocks of 10 sequences
    my $ua;
    if (1) {
        $ua = LWP::UserAgent->new;
        $ua->agent("Mozilla/8.0"); # pretend we are a capable browser
        # $ua->agent("Chrome/70.0.3538.110");
    } else { # robot
        $ua = LWP::RobotUA->new('EiC-gfis/1.0', 'georg.fischer@t-online,de');
        $ua->delay($wait/60);
    }
    $ua->timeout(6);
    my $count  = 0;
    my $prefix = "https://oeis.org/search?q=keyword:$keyword\&sort=modified"; # initial page with block count
    my $url    = $prefix;
    my $status = "000";
    print STDERR "sleep $wait s\n"; sleep $wait;
    print STDERR "read $url\n";
    my $response = $ua->request(GET "$url");
    # print STDERR "status " . $response->code() . "\n";
    my $page  = $response->decoded_content(charset => 'UTF-8');
    $status   = $response->code();
    if ($status ne "200") {
        die "bad status $status\n";
    }
    my @lines = split(/\n/, $page);
    my $iline = 0;
    my $last_block = 0;
    while ($iline < scalar(@lines)) {
        # print "$lines[$iline]\n";
        #    ...       <a href="/search?q=keyword%3anew&start=490&sort=modified">50</a>
        if ($lines[$iline] =~ m{\A\s*\.\.\.\s*\<a\s+href\=\"\/search\?q\=keyword\%3a$keyword\&start\=(\d+)\&}) {
            $last_block = $1;
            $iline = scalar(@lines); # break loop
        }
        $iline ++;
    } # while $iline
    print STDERR "last block $last_block\n";
    if ($last_block == 0) {
        die "could not read last block\n";
    }

    while ($last_block >= 0) {
        $url = "$prefix\&start=$last_block\&fmt=text";
        print STDERR "sleep $wait s\n"; sleep $wait;
        print STDERR "read $url\n";
        $response = $ua->request(GET "$url");
        $status = $response->code();
        if ($status ne "200") {
            die "bad status $status\n";
        }
        $page  = $response->decoded_content(charset => 'UTF-8');
        my $outname = sprintf("$outdir/${keyword}_%04d\.txt", $last_block);
        open (OUT, ">", $outname) || die "cannot write \"$outname\"\n";
        print OUT "%z $TIMESTAMP\n $page\n";
        close(OUT);
        # $last_block = 0; # for test
        $last_block -= $blocksize;
    } # while last_block
    print STDERR "fetched OEIS history \"$keyword\"\n";
#-------------------------------------------------------------
} elsif ($action eq "c") { # print CREATE SQL
    $tabname = shift(@ARGV);
    if (0) {
    } elsif ($tabname eq "brol") {
        print <<"GFis";
-- Table for OEIS broken link maintenance
-- @(#) \$Id\$
-- $TIMESTAMP - generated by brol_prepare.pl -c $tabname, do not edit here!
DROP    TABLE  IF EXISTS $tabname;
CREATE  TABLE            $tabname
    ( linetype   VARCHAR(2)  -- %H
GFis
        my $ifield = 2;
        while ($ifield < scalar(@fields)) {
            print sprintf("    , %-10s %-16s\n", $fields[$ifield], $fields[$ifield + 1]);
            $ifield += 2;
        } # while $ifield
        print <<"GFis";
    , PRIMARY KEY(aseqno, key2)
    );
COMMIT;
GFis
    } else {
        die "wrong tabname \"$tabname\"\n";
    }
#-------------------------------------------------------------
} elsif ($action eq "r") { # print tsv lines
    my $nseqno = "";
    my $hrowno = 1;
    my $hcolno = 0;
    $status = "unknown";
    while (<>) {
        next if ! m{^\%H};
        s{\r?\n}{}; # chompr
        my $line = $_;
        $line =~ m{^$linetype\s*(A\d{6})\s*([\w\s\.\-]*)};
        $aseqno = $1;
        $prefix = $2;
        if ($aseqno ne $nseqno) {
            $nseqno =  $aseqno;
            $hrowno = 1;
        } else {
            $hrowno ++;
        }
        $hcolno = 0;
        while (($line =~ s{\<a\s+href\=\"([^\"]+)\"[^\>]*\>([^\<]+)}{}i) > 0) { # external link found
            $hcolno ++;
            my $url  = $1;
            $content = $2;
            $port    = "";
            if (0) {
            } elsif ($url =~ m{^(\w+\:\/\/)([^\/\:]+)(\:\d+)?(.*)}) {
                $protocol = $1;
                $host     = $2;
                $port     = $3 || "";
                $path     = $4;
            } elsif ($url =~ m{^\/(.*)}) {
                $protocol = "file://";
                $host   = "";
                $path     = "/$1";
            } else {
                print STDERR "not matched: $url\n";
            }
            my @parts = split(/\//, $path);
            if (scalar(@parts) > 0) {
                $filename = pop(@parts);
            } else {
                $filename = "";
            }
            $path     = join("/", @parts) . "/";
            $status   = "";
            $replurl  = "";
            print join("\t",
                ( $linetype
                , $aseqno
                , sprintf("%03d", $hrowno) . substr($letters, $hcolno, 1) # = key2
                , $prefix
                , $protocol
                , $host
                , $port
                , $path
                , $filename
                , $content
                , $status
                , $TIMESTAMP
                , $replurl
                )
                ) . "\n";
        } # while external link href="http://..." found
    } # while <>
#-------------------------------------------------------------
} else {
    die "invalid action \"$action\"\n";
}
#=====================================
sub iso_time {
    my ($unix_time) = @_;
    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime (time);
    return sprintf ("%04d-%02d-%02d %02d:%02d:%02d"
        , $year + 1900, $mon + 1, $mday, $hour, $min, $sec);
} # iso_time
#=====================================
__DATA__
                <a href="/search?q=keyword%3anew&start=90&sort=created">10</a>
            ...       <a href="/search?q=keyword%3anew&start=490&sort=created">50</a>

                            <a href="/search?q=keyword%3achanged&start=90&sort=created">10</a>
            ...       <a href="/search?q=keyword%3achanged&start=2080&sort=created">209</a>

