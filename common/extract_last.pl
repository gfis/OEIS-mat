#!perl

# Extract last date mentioned in a sequence
# @(#) $Id$
# 2019-06-02, Georg Fischer: copied from extract_info.pl; Ulf = 50 +1
#
#:# usage:
#:#   perl extract_last.pl [-text|-json] [-d level] inputdir > outputfile
#:#       -d level    debug level none(0), some(1), more(2)
#:#       inputdir    (mandatory)
#:# perl extract_last.pl -json $(DIR)/ajson > aslast.txt
#:# perl extract_last.pl -text cat25.txt    > calast.txt
#---------------------------------
use strict;
use integer;
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday) = gmtime (time);
my $utc_stamp = sprintf ("%04d-%02d-%02dT%02d:%02d:%02d\z"
        , $year + 1900, $mon + 1, $mday, $hour, $min, $sec);

# get options
my $tabname    = "aslast";
my $action     = "-text"; 
my $debug      =  0; # 0 (none), 1 (some), 2 (more)
if (scalar(@ARGV) == 0) {
    print `grep -E "^#:#" $0 | cut -b3-`;
    exit;
}
while (scalar(@ARGV) > 0 and ($ARGV[0] =~ m{\A\-})) {
    my $opt = shift(@ARGV);
    if (0) {
    } elsif ($opt =~ m{\-d}) {
        $debug    = shift(@ARGV);
    } elsif ($opt =~ m{\-}) {
        $action   = $opt;
    } else {
        die "invalid option \"$opt\"\n";
    }
} # while ARGV
my $input = shift(@ARGV);
my %months = qw(Jan 01 Feb 02 Mar 03 Apr 04 May 05 Jun 06 Jul 07 Aug 08 Sep 09 Oct 10 Nov 11 Dec 12);
my $defaultdate = "1900-01-01";
#----------------------------------------------
if (0) {
#--------------------------
} elsif ($action =~ m{\-text}) {
    &extract_text($input);
#--------------------------
} elsif ($action =~ m{\-json}) {
    foreach my $file (glob("$input/*")) {
        &extract_json($file);
    } # foreach $file
#--------------------------
} else {
    die "invalid action \"$action\"\n";
} # actions
#-------------------------------------------------
sub extract_json { # read one sequence in JSON format
    my $result = "";
    my ($filename) = @_;
    open(INP, "<", $filename) || die "cannot read $filename\n";
    $filename =~ m{(A\d{6})\.json}i; # extract seqno
    my $aseqno   = $1;
    my $lastdate = $defaultdate; # default - undefined
    while (<INP>) {
        my $line = $_;
        if ($line =~ m{(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d\d) (19\d\d|20\d\d)}) {
            my $date   = "$3-$months{$1}-$2";
            if ($date gt $lastdate) {
                $lastdate = $date;
            }
        }
    } # while <INP>
    close(INP);
    print join("\t", ($aseqno, $lastdate)) . "\n";
} # extract_json
#-------------------------------------------------
sub extract_text { # read (many) sequences in internal text format
    my $result = "";
    my ($filename) = @_;
    open(INP, "<", $filename) || die "cannot read $filename\n";
    $filename =~ m{(A\d{6})\.json}i; # extract seqno
    my $oseqno   = "A000000";
    my $nseqno   = "A000000";
    my $lastdate = $defaultdate; # default - undefined
    while (<INP>) {
        my $line = $_;
        if ($line =~ m{(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d\d) (19\d\d|20\d\d)}) {
            my $date   = "$3-$months{$1}-$2";
            if ($date gt $lastdate) {
                $lastdate = $date;
            }
        }
        if ($line =~ m{^...(\w+)}) {
        	$nseqno = $1;
        	if ($nseqno ne $oseqno) {
            	print join("\t", $oseqno, $lastdate) . "\n";
            	$lastdate = $defaultdate; # default - undefined
            	$oseqno = $nseqno;
            }
        }
    } # while <INP>
    close(INP);
    print join("\t", $oseqno, $lastdate) . "\n";
} # extract_text
#-----------------------
sub print_create_aslast {
    print <<"GFis";
--  Table for OEIS - last date in sequence definition
--  @(#) \$Id\$
--  $utc_stamp: Georg Fischer - generated by extract_last.pl $action, do not edit here!
--
DROP    TABLE  IF EXISTS $tabname;
CREATE  TABLE            $tabname
    ( aseqno    VARCHAR(10)   -- A322469
    , lastdate  TIMESTAMP     -- last date mentioned in sequence definition
    , PRIMARY KEY(aseqno)
    );
COMMIT;
GFis
} # print_create_aslast
#------------------------------------
__DATA__
TEXT:
%Y A325990 Cf. A002033, A292886, A32578
%K A325990 nonn,new
%O A325990 1,1
%A A325990 _Gus Wiseman_, May 30 2019
(END)

JSON:
{
    "greeting": "Greetings from The On-Line Encyclopedia of Integer Sequences! http://oeis.org/",
    "query": "id:A200083",
    "count": 1,
    "start": 0,
    "results": [
        {
            "number": 200083,
            "data": "2,3,8,17,26,43,64,89,122,163,208,269,334,407,496,597,702,831,968,1117,1286,1471,1664,1889,2122,2371,2648,2945,3250,3595,3952,4329,4738,5171,5616,6109,6614,7143,7712,8309,8918,9583,10264,10973,11726,12511,13312",
            "name": "Number of 0..n arrays x(0..4) of 5 elements with zero 3rd differences.",
            "comment": [
                "Row 4 of A200082."
            ],
            "link": [
                "R. H. Hardin, \u003ca href=\"/A200083/b200083.txt\"\u003eTable of n, a(n) for n = 1..200\u003c/a\u003e"
            ],
            "formula": [
                "Empirical: a(n) = a(n-1) +a(n-3) -a(n-5) +a(n-6) -2*a(n-7) +a(n-8) -a(n-9) +a(n-11) +a(n-13) -a(n-14).",
                "Empirical g.f.: x*(2 + x + 5*x^2 + 7*x^3 + 6*x^4 + 11*x^5 + 5*x^6 + 8*x^7 + 3*x^8 + x^9 + 2*x^10 + x^11 + x^12 - x^13) / ((1 - x)^4*(1 + x)^2*(1 - x + x^2)*(1 + x^2)*(1 + x + x^2)^2). - _Colin Barker_, May 17 2018"
            ],
            "example": [
                "Some solutions for n=6:",
                "..2....1....2....3....0....4....0....5....0....6....6....3....6....0....4....3",
                "..3....3....4....4....4....4....0....6....3....2....3....3....3....1....3....5",
                "..3....4....5....4....6....4....0....6....4....0....2....3....1....2....2....6",
                "..2....4....5....3....6....4....0....5....3....0....3....3....0....3....1....6",
                "..0....3....4....1....4....4....0....3....0....2....6....3....0....4....0....5"
            ],
            "xref": [
                "Cf. A200082."
            ],
            "keyword": "nonn",
            "offset": "1,1",
            "author": "_R. H. Hardin_, Nov 13 2011",
            "references": 1,
            "revision": 13,
            "time": "2018-05-17T13:40:20-04:00",
            "created": "2011-11-13T12:40:47-05:00"
        }
    ]
}
