#!Maple
# Compute a linear recurrence from a transfer matrix 
# 2021-10-05, Georg Fischer
interface(prettyprint=0):
read "C://Users/User/work/gits/OEIS-mat/software/SCHUTZENBERGER-gfis.txt";
with(StringTools):
with(LinearAlgebra):
tostring:=proc(list):
  SubstituteAll(DeleteSpace(convert(list,string)), "[]", "[0]")
  end:
findit := proc(aseqno, offset, ope); local rec, rord, k, str, j;
  rec:=eval(ope, n=n); # shift=0
  rord:=degree(rec,A):
  ([[0], seq([seq(coeff(coeff(rec,A,rord-j),n,k),k=0..degree(coeff(rec,A,rord-j)))],j=0..rord) ] # matrix
  ,[1]
  )
  end:
holfind:=proc(aseqno, offset, dummy, list); local parms, matrix, inits, dist, remark;
  # printf("# parms: %a %a %a %a\n", aseqno, offset, dummy, list);
  parms := findit(aseqno, offset, list);
  matrix:= toString(parms[1]);
  inits := toString(parms[2]);
  dist  :=          parms[3];
  remark:= toString(parms[4]);
  printf("%a\tholos\t%a\t%s\t%s\t%a\t0\t%s\n", aseqno, offset, matrix, inits, dist, remark);
  printf("# make runholo OFF=%a MATRIX=\"%s\" INIT=\"%s\" DIST=%a\n", offset, matrix, inits, dist);
  end:
# holtramat:=proc(aseqno, size, differ); local A, e, n, offset, matrix, instr, dist, gftype;
#   offset := 0;
#   A := ToeplitzMatrix([seq(1,n=1..differ+1), seq(0,n=differ+2..size)], symmetric):
#   e := Vector(size, 1):
#   matrix := tostring([0]);
#   instr  := toString([1, seq(e^%T . A^n . e, n=0..size)]);
#   printf("instr=%s\n", instr);
#   # re:= findit(aseqno, offset, ope);
#   # matrix := tostring(re[1]);
#   dist   := 0;
#   gftype := 0;
#   printf("%a\tholos\t%a\t%s\t%s\t%a\t%a\n", aseqno                  , offset, matrix, instr, dist, gftype);
#   printf("# make runholo OFF=%a MATRIX=\"%s\" INIT=\"%s\" DIST=%a\n", offset, matrix, instr, dist);
#   end:

# holtramat(A126358, 4, 1);

# timelimit($(TIMEOUT), holtramat($(PARM0), $(PARM4), $(PARM5)));

# holfind(A000045, 0, [[0]], [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]);
