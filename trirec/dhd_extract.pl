#!perl

# Extract and normalize usages of Deléham's DELTA operator
# @(#) $Id$
# 2019-11-09, Georg Fischer
#
#:# Usage:
#:#   grep DELTA $(COMMON)/cat25.txt \
#:#   perl deldelta.pl inoxml.pl > outfile
#---------------------------------
use strict;
use integer;
use warnings;
my $version = "V1.1";
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime (time);
my $timestamp = sprintf ("%04d-%02d-%02d %02d:%02d:%02d"
        , $year + 1900, $mon + 1, $mday, $hour, $min, $sec);

my $debug  = 0;
while (scalar(@ARGV) > 0 and ($ARGV[0] =~ m{\A[\-\+]})) {
    my $opt = shift(@ARGV);
    if (0) {
    } elsif ($opt  =~ m{d}) {
        $debug  = shift(@ARGV);
    } else {
        die "invalid option \"$opt\"\n";
    }
} # while $opt

print "# Generated by OEIS-mat/linrec/deldelta.pl on $timestamp\n";
my $line = "";
my $last_no = "";
while (<>) {
    s{\s+\Z}{}; # chompr
    $line = substr($_, 3);
    $line =~ m{\A(A\d+)\s};
    my $aseqno = $1;
    $line =~ s{\(periodic sequence 0\,0\,1\)}{}g;
    if ($line =~ s{(\(A\d\d+\))}{}g) {
        $line .= " # $1";
    }
    if ($line =~ m{(A\d+|[\(\[\{]+[\,\. \-\=\/\+0-9]+[\)\]\}]+)\s*DELTA\s*(A\d+|[\(\[\{]+[\,\. \-\=\/\+0-9]+[\)\]\}]+)}) {
        my ($r, $s) = ($1, $2);
        ($r, $s) = map {
            s{\s}{}g;
            s{\=}{}g;
            tr{\(\)}{\[\]};
            s{,0,0(,0)*\,?\.?\.?\.?\]}{(,0)\*\]};
            s{A000004}{\[0(,0)\*\]}g;
            s{A000007}{\[1(,0)\*\]}g;
            s{(A\d+)}{seq\[$1\]}g;
            $_
            } ($r, $s);
        if ($last_no ne $aseqno) {
            print "$aseqno\t$r DELTA $s\n";
        } else {
            print "# duplicate: $aseqno\t$r DELTA $s\n";
        }
    } else {
        print "# $line\n";
    }
    $last_no = $aseqno;
} # while <>
#--------------------
__DATA__
A000004 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
A000007 ,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
A000012 ,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
A000035 ,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
A056594 ,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,
A101455 ,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,-1,0,1,0,
