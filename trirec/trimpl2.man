 * A048710 Family 1 "Rule 90 x Rule 150 Array" read by antidiagonals.
      protected Z computeNext() {
  public Z matrixElement(final int n, final int k) {
 * A049581 Table T(n,k) = |n-k| read by antidiagonals (n &gt;= 0, k &gt;= 0).
  public Z matrixElement(final int i, final int j) {
 * A051125 Table T(n,k) = max{n,k} read by antidiagonals (n &gt;= 1, k &gt;= 1).
  public Z matrixElement(final int i, final int j) {
 * A052179 Triangle of numbers arising in enumeration of walks on cubic lattice.
  protected Z compute(final int n, final int k) {
        ? mX.multiply(get(n - 1, 0)).add(get(n - 1, 1))
        : get(n - 1, k - 1).add(mY.multiply(get(n - 1, k))).add(get(n - 1, k + 1))
 - A052509 Knights-move Pascal triangle: T(n,k), n &gt;= 0, 0 &lt;= k &lt;= n; T(n,0) = T(n,n) = 1, T(n,k) = T(n-1,k) + T(n-2,k-1) for k = 1,2,...,n-1, n &gt;= 2.
  public Z compute(final int n, final int k) {
    return k == 0 || k == n ? Z.ONE : get(n - 1, k).add(get(n - 2, k - 1));
 - A053118 Triangle of coefficients of Chebyshev's U(n,x) polynomials (exponents in decreasing order).
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k).multiply2().subtract(get(n - 2, k - 2));
 - A053119 Triangle of coefficients of Chebyshev's S(n,x) polynomials (exponents in decreasing order).
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k).subtract(get(n - 2, k - 2));
 - A053120 Triangle of coefficients of Chebyshev's T(n,x) polynomials (powers of x in increasing order).
  public Z compute(final int n, final int k) {
    return n <= 1 ? super.compute(n, k) : get(n - 1, k - 1).multiply2().subtract(get(n - 2, k));
 - A053123 Triangle of coefficients of shifted Chebyshev's S(n,x-2)= U(n,x/2-1) polynomials (exponents of x in decreasing order).
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k).subtract(get(n - 1, k - 1).multiply2()).subtract(get(n - 2, k - 2));
 - A053125 Triangle of coefficients of Chebyshev's U(n,2*x-1) polynomials (exponents of x in decreasing order).
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k).multiply(4).subtract(get(n - 1, k - 1).multiply2()).subtract(get(n - 2, k - 2));
 - A053199 Triangular array T: put T(n,0)=n+1 for all n &gt;= 0 and all other T(n,k)=0; then put T(n,k)=Sum{T(i,j): 0&lt;=j&lt;=i-n+k, n-k&lt;=i&lt;=n}.
  public Z compute(final int n, final int k) {
      Z sum = get(n - 1, k - 1);
        sum = sum.add(get(n, j));
 * A053200 Binomial coefficients C(n,k) reduced modulo n, read by rows; T(0,0)=0 by convention.
 - A053218 Triangle read by rows where the first element in row n is n, and for k &gt;= 2 element k in row n is the sum of element k-1 in row n and element k-1 in row n-1.
  public Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n + 1) : get(n, k - 1).add(get(n - 1, k - 1));
 * A053398 Nim-values from game of Kopper's Nim.
  public Z matrixElement(final int n, final int k) {
 - A053495 Triangle formed by coefficients of numerator polynomials defined by iterating f(u,v) = 1/u - x*v applied to a list of elements {1,2,3,4,...}.
  public Z compute(final int n, final int k) {
    return n < 3 ? super.compute(n, k) : get(n - 1, k - 1).multiply(n).add(get(n - 2, k));
 - A054090 Triangular array generated by its row sums: T(n,0)=1 for n &gt;= 0, T(n,1)=r(n-1), T(n,k)=T(n,k-1)+d*r(n-k), d=(-1)^(k+1), for k=2,3,...,n, n &gt;= 2, r(h)=sum of the numbers in row h of T.
  public Z compute(final int n, final int k) {
        sum = sum.add(get(n - 1, j));
      mTerm = mTerm.add(get(n - k + 1, 1).multiply((((k + 1) & 1) == 0) ? 1 : -1));
 - A054098 Triangular array generated by its row sums: T(n,0)=1 for n &gt;= 0, T(1,1)=2, T(n,k)=T(n,k-1)+d*r(n-k) for k=2,3,...,n, d=(-1)^(k+1), n &gt;= 2, r(h)=sum of the numbers in row h of T.
      sum = sum.add(get(n, j));
  public Z compute(final int n, final int k) {
 - A054115 Triangular array generated by its row sums: T(n,0)=1 for n &gt;= 1, T(n,1)=r(n-1), T(n,k)=T(n,k-1)+r(n-k) for k=2,3,...,n, n &gt;= 2, r(h)=sum of the numbers in row h of T.
  public Z compute(final int n, final int k) {
        sum = sum.add(get(n - 1, j));
      mTerm = mTerm.add(get(n - k + 1, 1));
 - A054123 Right Fibonacci row-sum array T(n,k), n &gt;= 0, 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
    return k == 0 || k == n - 1 || k == n ? Z.ONE : get(n - 1, k).add(get(n - 2, k - 1));
 - A054124 Left Fibonacci row-sum array, n &gt;= 0, 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
    return k == 0 || k == 1 || k == n ? Z.ONE : get(n - 1, k - 1).add(get(n - 2, k - 1));
 - A054144 Triangular array T: put T(n,0)=n for all n &gt;= 0 and all other T(n,k)=0; then put T(n,k)=Sum{T(i,j): 0&lt;=j&lt;=i-n+k, n-k&lt;=i&lt;=n}.
  public Z compute(final int n, final int k) {
      Z sum = get(n - 1, k - 1);
        sum = sum.add(get(n, j));
 * A054238 Array read by downward antidiagonals: T(i,j) = bits of binary expansion of i interleaved with that of j.
  public Z matrixElement(final int n, final int k) {
 * A054240 Bit-interleaved number addition table; like binary addition but carries shift 2 instead of 1; addition base sqrt(2).
  public Z matrixElement(final int n, final int k) {
 * A054582 Array read by antidiagonals upwards: A(m,k) = 2^m * (2k+1), m,k &gt;= 0.
  public Z matrixElement(final int n, final int k) {
 + A055235 Sums of two powers of 3. 
  protected Z compute(final int n, final int k) {
 - A055356 Triangle of increasing mobiles (circular rooted trees) with n nodes and k leaves. 
  protected Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k).multiply(k + 1).add(get(n - 1, k - 1).multiply(n - 1));
 - A055794 Triangle T read by rows: T(i,0)=1 for i &gt;= 0; T(i,i)=1 for i=0,1,2,3; T(i,i)=0 for i &gt;= 4; T(i,j) = T(i-1,j) + T(i-2,j-1) for 1&lt;=j&lt;=i-1.
  public Z compute(final int n, final int k) {
    return get(n - 1, k).add(get(n - 2, k - 1));
 * A055858 Coefficient triangle for certain polynomials.
  public Z compute(final int n, final int k) {
 * A055864 Coefficient triangle for certain polynomials.
  public Z compute(final int n, final int k) {
 * A056951 Triangle whose rows show the result of flipping the first, first two, ... and finally first n coins when starting with the stack (1,2,3,4,...,n) [starting with all heads up, where signs show whether particular coins end up heads or tails].
  public Z compute(int n, int k) {
 * A057145 Square array of polygonal numbers T(n,k) = ((n-2)*k^2 - (n-4)*k)/2, n &gt;= 2, k &gt;= 1, read by antidiagonals upwards.
  public Z matrixElement(final int n, final int k) {
 * A059036 In a triangle of numbers (such as that in A059032, A059033, A059034) how many entries lie above position (n,k)? Answer: T(n,k) = (n+1)*(k+1)-1 (n &gt;= 0, k &gt;= 0).
  public Z matrixElement(final int n, final int k) {
 + A059297 Triangle of idempotent numbers binomial(n,k)*k^(n-k), version 1.
  protected Z compute(final int n, final int k) {
 + A059298 Triangle of idempotent numbers binomial(n,k)*k^(n-k), version 2.
  protected Z compute(final int n, final int k) {
 + A059299 Triangle of idempotent numbers binomial(n,k)*k^(n-k), version 3.
  protected Z compute(final int n, final int k) {
 + A059300 Triangle of idempotent numbers binomial(n,k)*k^(n-k), version 4.
  protected Z compute(final int n, final int k) {
 - A059317 Pascal's "rhombus" (actually a triangle T(n,k), n &gt;= 0, 0&lt;=k&lt;=2n) read by rows: each entry is sum of 3 terms above it in previous row and one term above it two rows back.
  public Z compute(final int n, final int k) {
      return get(n - 2, k - 2).add(get(n - 2, k - 1)).add(get(n - 2, k)).add(get(n - 4, k - 2));
 - A059369 Triangle of numbers T(n,k) = T(n-1,k-1) + ((n+k-1)/k)*T(n-1,k), n &gt;= 1, 1 &lt;= k &lt;= n, with T(n,1) = n!, T(n,n) = 1; read from right to left.
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k - 1).multiply(2L * n - k + 1).divide(n - k + 1).add(get(n - 1, k));
 * A059674 Square array a(m,n) = binomial(max(m,n), min(m,n)) (m&gt;=0, n&gt;=0) read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A060821 Triangle T(n,k) read by rows giving coefficients of Hermite polynomial of order n (n &gt;= 0, 0 &lt;= k &lt;= n).
  public Z compute(final int n, final int k) {
 - A061896 Triangle of coefficients of Lucas polynomials.
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.TWO : (k == 0 ? Z.ONE : get(n - 1, k).add(get(n - 2, k - 1)));
 * A062160 Square array T(n,k) = (n^k - (-1)^k)/(n+1), n &gt;= 0, k &gt;= 0, read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 + A062169 Triangle T(n, k) = k! mod n for n &gt;= 1, 1 &lt;= k &lt;= n.
  protected Z compute(final int n, final int k) {
 - A068106 Euler's difference table: triangle read by rows, formed by starting with factorial numbers (A000142) and repeatedly taking differences. T(n,n) = n!, T(n,k) = T(n,k+1) - T(n-1,k).
  public Z compute(final int n, final int k) {
      ? super.compute(n, k)
      ? get(n - 1, 0).add(get(n - 2, 0)).multiply(n - 1)
      : get(n - 1, k - 1).add(get(n, k - 1)));
 * A068606 Square table by antidiagonals of T(n,k)=n*k*(n+k+1).
  public Z matrixElement(final int n, final int k) {
 * A068607 Triangle of T(n,k)=n*k*(n+k+1) with n&gt;=k&gt;=0.
  public Z compute(final int n, final int k) {
 * A069011 Triangle with T(n,k) = n^2 + k^2.
  public Z compute(final int n, final int k) {
 * A070216 Triangle T(n, k) = n^2 + k^2, 1 &lt;= k &lt;= n, read by rows.
  public Z compute(final int n, final int k) {
 * A072024 Table by antidiagonals of T(n,k) = ((n+1)^k - (-n)^k)/(2*n+1).
  public Z matrixElement(final int n, final int k) {
 - A072405 Triangle T(n, k) = C(n,k) - C(n-2,k-1) for n &gt;= 3 and T(n, k) = 1 otherwise, read by rows.
 * A073060 Multiplication table for 1 and odd primes, read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 - A073107 Triangle T(n,k) read by rows, where e.g.f. for T(n,k) is exp((1+y)*x)/(1-x) (with n &gt;= 0 and 0 &lt;= k &lt;= n).
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k).multiply(n).add(Binomial.binomial(n, k));
 * A074147 (2n-1) odd numbers followed by 2n even numbers.
  public Z compute(final int n, final int k) {
 - A075497 Stirling2 triangle with scaled diagonals (powers of 2).
  public Z compute(final int n, final int k) {
    return get(n - 1, k).multiply(mPower * (long) (k + 1)).add(get(n - 1, k - 1));
 + A076014 Triangle in which m-th entry of n-th row is m^(n-1). 
  protected Z compute(final int n, final int k) {
 * A077029 Rectangle R(i,j) read by ascending antidiagonals: column j has j-1 zeros followed by numbers congruent to 1 mod j-1.
  public Z matrixElement(final int i, final int j) {
 + A079901 Triangle of powers, T(n,k) = n^k, 0&lt;=k&lt;=n, read by rows.
  protected Z compute(final int n, final int k) {
 + A079904 Triangle read by rows: T(n, k) = n*k, 0&lt;=k&lt;=n.
  protected Z compute(final int n, final int k) {
 + A080098 Triangle T(n,k) = n OR k, 0 &lt;= k &lt;= n, bitwise logical OR, read by rows.
  protected Z compute(final int n, final int k) {
 + A080099 Triangle T(n,k) = n AND k, 0&lt;=k&lt;=n, bitwise logical AND, read by rows.
  protected Z compute(final int n, final int k) {
 * A081114 Triangle read by rows: T(n,k) = n*T(n-1,k) + n - k starting at T(n,n)=0.
  protected Z compute(final int n, final int k) {
    return n == k ? Z.ZERO : get(n - 1, k).multiply(n).add(n - k);
 * A081297 Array T(k,n), read by antidiagonals: T(k,n) = ((k+1)^(n+1)-(-k)^(n+1))/(2k+1).
  public Z matrixElement(final int n, final int k) {
 * A081458 Table T(m,n) = (3^m + 5^n)/2, for m, n = 0, 2, 4, 6, ... read by antidiagonals downwards.
  public Z matrixElement(final int n, final int k) {
 * A082110 Array T(n,k) = k^2*n^2+5*k*n+1, read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A083075 Square array read by antidiagonals: T(n,k) = (k*(2*k+3)^n + 1)/(k+1).
  public Z matrixElement(final int n, final int k) {
 * A083487 Triangle read by rows: T(r,c) = 2*r*c + l + c (1 &lt;= c &lt;= l).
  public Z compute(final int n, final int k) {
 * A086270 Rectangular array T(k,n) of polygonal numbers, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A086271 Rectangular array T(n,k) of polygonal numbers, by diagonals.
  public Z matrixElement(final int i, final int j) {
 * A086272 Rectangular array T(n,k) of central polygonal numbers, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A086273 Rectangular array T(n,k) of central polygonal numbers, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 - A087322 Triangle T read by rows: T(n, 1) = 2*n + 1. For 1 &lt; k &lt;= n, T(n, k) = 2*T(n,k-1) + 1.
  public Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(2 * n + 3) : get(n, k - 1).multiply2().add(1);
 + A087401 Triangle of n*r-binomial(r+1,2).
  protected Z compute(final int n, final int k) {
 * A090171 Triangle read by rows, related to Pascal's triangle read mod 2, starting with 0, 1, 0.
  protected Z compute(final int n, final int k) {
        ? super.compute(n, k) 
        : get(n - 1, k).add(get(n - 1, k - 1)).add(get(n - 2, k)).add(get(n - 2, k - 1)).add(get(n - 2, k - 2));
 * A092283 Triangular array read by rows: T(n,k)=n+k^2, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 + A092477 Triangle read by rows: T(n,k) = (2^k - 1)^n, 1&lt;=k&lt;=n.
  protected Z compute(final int n, final int k) {
 * A093898 Triangle read by rows: T(n,r) = n^r + r^n (1 &lt;= r &lt;= n).
  public Z compute(final int n, final int k) {
 + A093995 n^2 repeated n times, triangle read by rows.
  protected Z compute(final int n, final int k) {
 * A094053 Triangle read by rows: T(n,k) = k*(n-k), 1 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A094250 Array read by antidiagonals: T(n,k) = (n+2)^(k+1)/(n+1)^2+k+1-(k+1)/(n+1)-1/(n+1)^2, n &gt;= 0, k &gt;= 0.
  public Z matrixElement(final int n, final int k) {
 - A094495 Table of binomial coefficients mod m^2, read by rows: T(m, n) = binomial(m, n) mod m^2.
 * A094615 Triangular array T of numbers generated by these rules: 1 is in T; and if x is in T, then 2x+1 and 3x+2 are in T.
  public Z compute(final int n, final int k) {
 * A094728 Triangle read by rows: T(n,k) = n^2 - k^2, 0&lt;=k&lt;n.
  public Z compute(final int n, final int k) {
 - A095709 Triangle of numbers obtained by reversing the first n digits of Pi and juxtaposing.
  public Z compute(final int n, final int k) {
    return k == 0 ? mPi.next() : get(n - 1, k - 1);




 * A095831 Triangle read by rows: T(n,k) = (n-k)^2, n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095832 Triangle read by rows: T(n,k) = (n-k+1)*(n-k), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095833 Triangle read by rows: T(n,k) = (n-k+1)*n, n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095834 Triangle read by rows: T(n,k) = (n-k)*n, n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095835 Triangle read by rows: T(n,k) = n^((n-k)^2), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095836 Triangle read by rows: T(n,k) = k^((n-k)^2), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095837 Triangle read by rows: T(n,k) = (n-k+1)^((n-k)^2), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095838 Triangle read by rows: T(n,k) = n^((n-k+1)^2), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095843 Triangle read by rows: T(n,k) = (n-k)^((n-k+1)^2), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095850 Triangle read by rows: T(n,k) = k^((n-k+1)^2), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095851 Triangle read by rows: T(n,k) = (n-k+1)^((n-k+1)^2), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095852 Triangle read by rows: T(n,k) = (n-k+1)^(k^2), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095859 Triangle read by rows: T(n,k) = (n-k)^(k^2), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095860 Triangle read by rows: T(n,k) = n^(k^2), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095876 Triangle read by rows: T(n,k) = k^(n^2), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095881 Triangle read by rows: T(n,k) = (n-k+1)^(n^2), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095882 Triangle read by rows: T(n,k) = (n-k)^(n^2), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095884 Triangle read by rows: T(n,k) = (n-k)^k, n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095886 Triangle read by rows: T(n,k) = (n-k)^n, n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095887 Triangle read by rows: T(n,k) = (n-k+1)^n, n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095888 Triangle read by rows: T(n,k) = n^(n-k), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095890 Triangle read by rows: T(n,k) = (n-k+1)^(n-k), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095891 Triangle read by rows: T(n,k) = (n-k+1)^(n-k+1), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095893 Triangle read by rows: T(n,k) = (n-k)^(n-k+1), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A095896 Triangle read by rows: T(n,k) = n^(n-k+1), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A096037 Triangle T(n,m) = (3*n+3*m-2)*(n+1-m)/2 read by rows.
  public Z compute(int n, int k) {
 * A096038 Triangle T(n,m) = (3*n^2-3*m^2+5*m-4+n)/2 read by rows.
  public Z compute(int n, int k) {
 * A096133 Triangle T(j,k) = (j^k) mod (j*k) for 1 &lt;= k &lt;= j, read by rows.
  protected Z compute(int n, int k) {
 * A097750 Reversal of the binomial transform of the Whitney triangle A004070 (see A131250), triangle read by rows, T(n,k) for 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
    return get(n - 1, k).add(get(n - 1, k - 1).multiply2()).subtract(get(n - 2, k - 2));
 * A098355 Multiplication table of the powers of three read by antidiagonals.
  protected Z compute(final int n, final int k) {
 * A099627 Triangle read by rows: T(n,k)=2^n+2^k-1 with n&gt;=k&gt;=0.
  public Z compute(final int n, final int k) {
 * A100345 Triangle read by rows: T(n,k) = n*(n+k), 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A100851 Triangle read by rows: T(n,k) = 2^n * 3^k, 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A101447 Triangle read by rows: T(n,k) = (2*k+1)*(n+1-k), 0 &lt;= k &lt; n.
  public Z compute(final int n, final int k) {
 * A101468 Triangle read by rows: T(n,k)=(n+1-k)*(3*k+1).
  public Z compute(final int n, final int k) {
 * A101492 Triangle read by rows: T(n,k) = (n-k+1)*(4*k+1).
  public Z compute(final int n, final int k) {
 * A101493 Triangle read by rows: T(n,k) = (n+1)*(2*(n+1)-1) - k*(2*k-1).
  public Z compute(final int n, final int k) {
 * A101598 Triangle read by rows: T(n,k) = number of distinct digits in decimal representation of binomial(n,k), 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A102728 Array read by antidiagonals: T(n, k) = ((n+1)^k-(n-1)^k)/2.
  public Z matrixElement(final int n, final int k) {
 * A102752 Array read by antidiagonals: T(n, k) = ((n+2)^k-(n-1)^k)/3.
  public Z matrixElement(final int n, final int k) {
 * A102765 Array read by antidiagonals: T(n, k) = ((n+4)^k-(n-1)^k)/5.
  public Z matrixElement(final int n, final int k) {
 * A103217 Hexagonal numbers triangle read by rows: T(n,k)=(n+1-k)*(2*(n+1-k)-1).
  public Z compute(final int n, final int k) {
 * A103218 Triangle read by rows: T(n, k) = (2*k+1)*(n+1-k)^2.
  public Z compute(final int n, final int k) {
 * A103219 Triangle read by rows: T(n,k) = (n+1-k)*(4*(n+1-k)^2 - 1)/3+2*k*(n+1-k)^2.
  public Z compute(final int n, final int k) {
 * A103406 Triangle read by rows: n-th row = unsigned coefficients of the characteristic polynomials of an n X n matrix with 2's on the diagonal and 1's elsewhere.
  public Z compute(final int n, final int k) {
 * A104567 Triangle read by rows: T(i,j) = i-j+1 if j is odd; T(i,j) = 2(i-j+1) if j is even (1 &lt;= j &lt;= i).
  protected Z compute(int n, int k) {
 * A104633 Triangle T(n,k) = k*(k-n-1)*(k-n-2)/2 read by rows, 1&lt;=k&lt;=n.
  protected Z compute(final int n, final int k) {
 * A104634 Triangle T(n,k) = (k-1-n)*(k-2-n)*(k+2*n)/6, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A104713 Triangle T(n,k) = binomial(n,k), read by rows, 3 &lt;= k &lt;=n .
  public Z compute(final int n, final int k) {
 * A104716 Triangle T(n,k) = (2k-3+4n)*(k-1-n)*(k-2-n)/6, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A105125 Triangle read by rows: T(n,k) = n^3 + k^3, n &gt;= 0, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A106255 Triangle composed of triangular numbers, row sums = A006918.
  public Z matrixElement(final int i, final int j) {
 * A106314 Triangle T(n,k) composed of the squares min(n,k)^2.
  public Z matrixElement(final int i, final int j) {
 * A107972 Triangle read by rows: T(n,k) = (k+1)(k+2)(n+2)(3n-2k+3)/12 for 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A107980 Triangle read by rows: T(n,k) = (n+2)*(k+1)*(k+2)*(2*n-k+2)*(2*n-k+3)/24.
  public Z compute(final int n, final int k) {
 * A107981 Triangle read by rows: T(n,k) = (k+1)(k+2)(n+2)(n+3)(6n^2 - 8n*k + 18n + 3k^2 - 11k + 12)/144 for 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A107983 Triangle read by rows: T(n,k) = (k+1)(n+2)(n+3)(n-k+2)(n-k+1)/12 for 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A107984 Triangle read by rows: T(n,k) = (k+1)(n+2)(2n-k+3)(n-k+1)/6 for 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A108083 Triangle, read by rows, where T(0,0) = 1, T(n,k) = (-1)^n*(2n+1)*T(n-1,k) - T(n-1,k-1).
  protected Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k).multiply((n & 1) == 0 ? 2 * n + 1 : - 2 * n - 1).subtract(get(n - 1, k - 1));
 * A108084 Triangle, read by rows, where T(0,0) = 1, T(n,k) = 2^n*T(n-1,k) + T(n-1,k-1).
  protected Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k).multiply(Z.ONE.shiftLeft(n)).add(get(n - 1, k - 1));
 * A108085 Triangle, read by rows, where T(0,0) = 1, T(n,k) = 2^n*T(n-1,k) - T(n-1,k-1).
  protected Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k).multiply(Z.ONE.shiftLeft(n)).subtract(get(n - 1, k - 1));
 * A108086 Triangle, read by rows, where T(0,0) = 1, T(n,k) = (-1)^(n+k)*T(n-1,k) + T(n-1,k-1); a signed version of Pascal's triangle.
  protected Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : (((n + k) & 1) == 0 ? get(n - 1, k) : get(n - 1, k).negate()).add(get(n - 1, k - 1));
 * A108396 Triangle read by rows: T(n,k) = n*(1+n^k)/2, 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A108667 Triangle read by rows: T(n,k) = 9k*n + 14(n+k) + 20 (0 &lt;= k &lt;= n).
  public Z compute(final int n, final int k) {
 * A109161 Triangle read by rows: T(n, k) = n*(n+9) + k + 5, with T(0, 0) = 5 and T(1, 0) = 15.
  public Z compute(final int n, final int k) {
 * A109692 Triangle of coefficients in expansion of (1+x)(1+3x)(1+5x)(1+7x)...(1+(2n-1)x). 
  protected Z compute(final int n, final int k) {
    return n <= 1 ? Z.ONE : get(n - 1, k).add(Z.valueOf(2 * n - 1).multiply(get(n - 1, k - 1)));
 * A110449 Triangle read by rows: T(n,k) = n*((2*k+1)*n+1)/2, 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A110555 Triangle of partial sums of alternating binomial coefficients: T(n,k) = Sum_{k=0..n} binomial(n,k)*(-1)^k.
  public Z compute(final int n, final int k) {
 * A111505 Right half of Pascal's triangle (A007318) with zeros.
 * A111578 Triangle T(n, m) = T(n-1, m-1) + (4m-3)*T(n-1, m) read by rows 1&lt;=m&lt;=n.
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k - 1).add(get(n - 1, k).multiply(4 * k + 1));
 * A111650 2n appears n times (n&gt;0). 
  protected Z compute(final int n, final int k) {
 * A113280 A symmetrical triangle of coefficients: t(n,m)=(n - m)*(n - m + 2)*m*(m + 2) + 1.
  public Z compute(final int n, final int k) {
 * A113582 Triangle T(n,m) read by rows: T(n,m) = (n - m)*(n - m + 1)*m*(m + 1)/4 + 1.
  public Z compute(final int n, final int k) {
 * A114327 Table T(n,m) = n - m read by upwards antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A114423 Multifactorial array read by ascending antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A118124 Triangle T(n,m) = (n+m)^2+n+m+41, read by rows.
  public Z compute(final int n, final int k) {
 * A118413 Triangle read by rows: T(n,k) = (2*n-1)*2^(k-1), 0&lt;k&lt;=n.
  public Z compute(final int n, final int k) {
 * A118416 Triangle read by rows: T(n,k) = (2*k-1)*2^(n-1), 0&lt;k&lt;=n.
  public Z compute(final int n, final int k) {
 * A120070 Triangle of numbers used to compute the frequencies of the spectral lines of the hydrogen atom.
  public Z compute(final int n, final int k) {
 * A120434 Triangle read by rows: counts permutations by number of big descents.
  public Z compute(final int n, final int k) {
    return n == k ? Z.TWO : get(n - 1, k - 1).multiply(n + 1 - k).add(get(n - 1, k).multiply(k + 2));
 * A121722 Triangle T(n,k) = 1 + k*n*(n+1)/2, read by rows.
  public Z compute(final int n, final int k) {
 * A122218 Pascal array A(n,p,k) for selection of k elements from two sets L and U with n elements in total whereat the nl = n - p elements in L are labeled and the nu = p elements in U are unlabeled and (in this example) with p = 2 (read by rows).
 * A122750 Triangle T(n,k) = (-1)^(k+1) if n is odd, = (-1)^k if n and k are even, = 2*(-1)^k if n is even and k is odd, 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A122758 Triangle read by rows: T(n,m) = 2*n^2*A084221(n) (n&gt;=0, 0 &lt;= m &lt;= n).
  public Z compute(final int n, final int k) {
    return k == 0 ? Z.TWO.multiply(n * (long) n) : (k == 1 ? Z.SIX.multiply(n * (long) n) : get(n, k - 2).multiply(4));
 * A123002 Triangle read by rows: T(n, k) = 2^(n-1)*(2*k - 1) - 2^(k-1)*(2*n - 1).
  public Z compute(final int n, final int k) {
 * A123229 Triangle read by rows: T(n, m) = n - (n mod m).
  public Z compute(int n, int k) {
 * A124848 Triangle read by rows: T(n,k) = (k+1)*(k+2)*(k+3)*binomial(n,k)/6 (0 &lt;= k &lt;= n).
 * A125092 Triangle read by rows: T(n,k) = (k+1)^2*binomial(n,k) (0 &lt;= k &lt;= n).
 * A126890 Triangle read by rows: T(n,k) = n*(n+2*k+1)/2, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A126988 Triangle read by rows: T(n,k) = n/k if k is a divisor of n; T(n,k) = 0 if k is not a divisor of n (1 &lt;= k &lt;= n).
  public Z compute(final int n, final int k) {
 * A127093 Triangle read by rows: T(n,k)=k if k is a divisor of n; otherwise, T(n,k)=0 (1 &lt;= k &lt;= n).
  public Z compute(final int n, final int k) {
 * A127449 Triangle T(n,k) = n if gcd(n,k)=1, =0 otherwise.
  public Z compute(final int n, final int k) {
 * A127651 Triangle T(n,k) = n*k if k|n, 0 otherwise; 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A127672 Monic integer version of Chebyshev T-polynomials (increasing powers).
  public Z compute(final int n, final int k) {
      return get(n - 1, k - 1).subtract(get(n - 2, k));
 * A128064 Triangle T with T(n,n)=n, T(n,n-1)=-(n-1) and otherwise T(n,k)=0; 0&lt;k&lt;=n.
  public Z compute(int n, int k) {
 * A128440 Array T by antidiagonals: T(n,k)=Floor(k*t^n) where t=golden ratio=(1+sqrt(5))/2.
  public Z matrixElement(final int i, final int j) {
 * A128442 Array T by antidiagonals: T(n,k)=Floor(k*2^(n/2)).
  public Z matrixElement(final int i, final int j) {
 * A128444 Array T by antidiagonals: T(n,k)=Floor(k*3^(n/2)).
  public Z matrixElement(final int i, final int j) {
 * A129116 Multifactorial array: A(k,n) = k-tuple factorial of n, for positive n, read by ascending antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A129234 Triangle read by rows: T(n,k)=n/k + k - 1 if n mod k = 0; otherwise T(n,k)=0 (1&lt;=k&lt;=n).
  public Z compute(final int n, final int k) {
 * A130128 Triangle read by rows: T(n,k) = (n - k + 1)*2^(k-1).
  public Z compute(final int n, final int k) {
 * A130154 Triangle read by rows: T(n, k) = 1 + 2*(n-k)*(k-1) (1 &lt;= k &lt;= n).
  public Z compute(final int n, final int k) {
 * A130296 Triangle read by rows: T[i,1]=i, T[i,j]=1 for 1 &lt; j &lt;= i = 1,2,3,...
  protected Z compute(final int n, final int k) {
 * A131421 Triangle read by rows (n&gt;=1, 1&lt;=k&lt;=n): T(n,k) = 2*(n+k) - 3.
  public Z compute(final int n, final int k) {
 * A131507 2n+1 appears n+1 times.
  protected Z compute(final int n, final int k) {
 * A132044 Triangle T(n,k) = binomial(n, k) - 1 with T(n,0) = T(n,n) = 1, read by rows.
 * A132111 Triangle read by rows: T(n,k) = n^2 + k*n + k^2, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A132118 Triangle read by rows: T(n,k) = n*(n-1)/2 + 2*k - 1.
  public Z compute(final int n, final int k) {
 * A132121 Triangle read by rows: T(n,k)=n*(n+1)*((3*k+2)*n+1)/6, 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A132728 Triangle T(n, k) = 4 - 3*(-1)^k, read by rows.
  public Z compute(final int n, final int k) {
 * A132735 Triangle T(n,k) = binomial(n,k) + 1 with T(n,0) = T(n,n) = 1, read by rows.
 * A132742 Triangle T(n,m) = 1 + ((2*n*3^m) mod 12), read by rows.
  public Z compute(final int n, final int k) {
 * A132898 Triangle read by rows: T(n,k) = (-1)^(n-1)*n + (-1)^(k-1)*k - 1, 1 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A134226 Triangle T(n, k) = 3*n - 4 if k = n-1 otherwise k, read by rows.
  public Z compute(final int n, final int k) {
 * A134231 Triangle T(n, k) = n -k +1 with T(n, n-1) = 2*n-1 and T(n, n) = 1, read by rows.
  public Z compute(final int n, final int k) {
 * A134521 Triangle read by rows: T(n,k) = binomial(n,k) + (n + k) mod 2.
 * A134574 Array, a(n,k) = total size of all n-length words on a k-letter alphabet, read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A134832 Triangle of succession numbers for circular permutations.
  public Z compute(final int n, final int k) {
    return k == 0 ? mSeq.next() : get(n - k, 0).multiply(Binomial.binomial(n, k));
 * A140303 Triangle T(n,k) = 3^(n-k) read by rows.
  public Z compute(final int n, final int k) {
 * A140978 Repeat (n+1)^2 n times.
  protected Z compute(final int n, final int k) {
 * A141387 Triangle read by rows: T(n,m) = n + 2*m*(n - m) (0 &lt;= m &lt;= n).
  public Z compute(final int n, final int k) {
 * A141388 Triangle T(n, k) = ( k*(n-k+1) )^3 - 2^(n-1), read by rows.
  public Z compute(final int n, final int k) {
 * A141402 Triangle T(n, k) = n^2 + (2*k*(n-k))^2, read by rows.
  public Z compute(final int n, final int k) {
 * A141418 Triangle read by rows: T(n,k) = k * (2*n - k - 1) / 2, 1 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A141429 Triangle T(n, k) = (k+1)*(n-k+1), read by rows.
  public Z compute(final int n, final int k) {
 * A141431 Triangle T(n,k) = (k-1)*(3*n-k+1), read by rows.
  public Z compute(final int n, final int k) {
 * A141432 Triangle T(n,k) = (k+1)*(n-k-1) read by rows.
  public Z compute(final int n, final int k) {
 * A141433 Triangle T(n, k) = (k-1)*(3*n-k), read by rows.
  public Z compute(final int n, final int k) {
 * A141434 Triangle T(n, k) = (k-1)*(3*n-k-1), read by rows.
  public Z compute(final int n, final int k) {
 * A141662 Triangle read by rows, T(n,m) = abs(n - m^2).
  public Z compute(final int n, final int k) {
 * A141672 Triangle defined by T(n, k) = (n/k)*MoebiusMu(n) if n mod k is zero and T(n, 0) = n+1, read by rows.
  public Z compute(final int n, final int k) {
 * A143084 Triangle read by rows: T(n,m) = (n + m)!.
  public Z compute(final int n, final int k) {
 * A143088 Triangle T(n,m)=( 2^(m+1)-1 ) * ( 2^(n-m+1)-1 ), read by rows, 0&lt;=m&lt;=n.
  public Z compute(final int n, final int k) {
 * A143182 Triangle T(n,m) = 1 + abs(n-2*m), read by rows, 0&lt;=m&lt;=n.
  public Z matrixElement(final int i, final int j) {
 * A143218 Triangle read by rows, A127775 * A000012 * A127775; 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A143254 Triangle read by rows, T(n,k) = (4n-3)*(4k-3); 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A143267 Triangle read by rows, A130207 * A000012 * A127648.
  public Z compute(final int n, final int k) {
    return k == 0 ? mSeq.next() : get(n, 0).multiply(k + 1);
 * A143844 Triangle T(n,k) = k^2 read by rows.
  protected Z compute(final int n, final int k) {
 * A143901 Rectangular array R by antidiagonals: R(m,n) = floor((m*n+1)/2).
  public Z matrixElement(final int i, final int j) {
 * A143902 Rectangular array R by antidiagonals: R(m,n) = number of black squares.
  public Z matrixElement(final int i, final int j) {
 * A144112 Weight array W={w(i,j)} of the natural number array A000027.
  public Z matrixElement(final int n, final int k) {
 * A144113 Weight array W={w(i,j)} of the natural number array A038722.
  public Z matrixElement(final int n, final int k) {
 * A144204 Array A(k,n) = (n+k-2)*(n-1) - 1 (k &gt;= 1, n &gt;= 1) read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A144216 C(m,2)+C(n,2), m&gt;=1, n&gt;=1: a rectangular array R read by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A144257 Weight array of A086270.
  public Z matrixElement(final int n, final int k) {
 * A144464 Triangle T(n,m) read by rows: T(n,m) = 2^min(m,n-m).
  public Z matrixElement(final int i, final int j) {
 * A144562 Triangle read by rows: T(n, k) = 2*n*k + n + k - 1.
  public Z compute(int n, int k) {
 * A147644 Triangle read by rows: t(n,m)=Binomial[n, m] + If[n &gt; 2, 2*Binomial[n - 2, m - 1], 0]; Mod[If[n &gt; 2, 2*Binomial[n - 2, m - 1], 0],2]=0.
 * A151890 Triangle read by rows: T(l,c) = 2*l*c + l + c (0 &lt;= c &lt;= l).
  public Z compute(final int n, final int k) {
 * A152714 Triangle read by rows: T(n,k) = 3^min(k, n-k).
  public Z compute(final int n, final int k) {
 * A154614 Triangle read by rows where T(m,n) = m*n + m + n - 1, 1&lt;=n&lt;=m.
  public Z compute(final int n, final int k) {
 * A155151 Triangle T(n, k) = 4*n*k + 2*n + 2*k + 2, read by rows.
  public Z compute(final int n, final int k) {
 * A155955 Triangle read by rows: T(n,k) = (k*n)^k, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A156353 A symmetrical powers triangle sequence: t(n,m) = (m^(n - m) + (n - m)^m).
  public Z compute(final int n, final int k) {
 * A156354 Triangle T(n, k) = k^(n-k) + (n-k)^k with T(0, 0) = 1, read by rows.
  public Z compute(final int n, final int k) {
 * A157454 Triangle read by rows: T(n, m) = min(2*m - 1, 2*(n - m) + 1).
  public Z matrixElement(final int i, final int j) {
 * A159797 Triangle read by rows in which row n lists n+1 terms, starting with n, such that the difference between successive terms is equal to n-1.
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n) : get(n, k - 1).add(n - 1);
 * A159798 Triangle read by rows in which row n lists n terms, starting with 1, such that the difference between successive terms is equal to n-3.
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.ONE : get(n, k - 1).add(n - 2);
 * A159881 Triangle read by rows : T(n,0) = n+1, T(n,k)=0 if k&lt;0 or if k&gt;n, T(n,k) = k*T(n-1,k) - T(n-1,k-1).
  public Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n + 1) : get(n - 1, k).multiply(k).subtract(get(n - 1, k - 1));
 * A162245 Triangle T(n,m) = 6*m*n + 3*m + 3*n + 1 read by rows.
  public Z compute(final int n, final int k) {
 * A162608 Triangle read by rows in which row n lists n+1 terms, starting with n!, such that the difference between successive terms is also equal to n!.
  protected Z compute(final int n, final int k) {
      return get(n, k - 1).add(mFact);
 * A162609 Triangle read by rows in which row n lists n terms, starting with 1, with gaps = n-2 between successive terms.
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.ONE : get(n, k - 1).add(n - 1);
 * A162610 Triangle read by rows in which row n lists n terms, starting with 2n-1, with gaps = n-1 between successive terms.
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(2L * n + 1) : get(n, k - 1).add(n);
 * A162611 Triangle read by rows in which row n lists n+1 terms, starting with n, such that the difference between successive terms is equal to n^2 - 1.
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n) : get(n, k - 1).add(Z.valueOf(n).pow(2)).subtract(1);
 * A162612 Triangle read by rows in which row n lists n terms, starting with n^2+n-1, with gaps = n^2-1 between successive terms.
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n + 1).pow(2).add(n) : get(n, k - 1).add(Z.valueOf(n + 1).pow(2)).subtract(1);
 * A162613 Triangle read by rows in which row n lists n terms, starting with n, with gaps = n^2-1 between successive terms.
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n + 1) : get(n, k - 1).add(n * (n + 2L));
 * A162614 Triangle read by rows in which row n lists n+1 terms, starting with n, such that the difference between successive terms is equal to n^3 - 1.
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n) : get(n, k - 1).add(Z.valueOf(n).pow(3)).subtract(1);
 * A162615 Triangle read by rows in which row n lists n terms, starting with n, such that the difference between successive terms is equal to n^3 - 1 = A068601(n).
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n + 1) : get(n, k - 1).add(Z.valueOf(n + 1).pow(3)).subtract(1);
 * A162616 Triangle read by rows in which row n lists n terms, starting with n^3 + n - 1, such that the difference between successive terms is equal to n^3 - 1 = A068601(n).
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n + 1).pow(3).add(n) : get(n, k - 1).add(Z.valueOf(n + 1).pow(3)).subtract(1);
 * A162622 Triangle read by rows in which row n lists n+1 terms, starting with n, such that the difference between successive terms is equal to n^4 - 1.
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n) : get(n, k - 1).add(Z.valueOf(n).pow(4)).subtract(1);
 * A162623 Triangle read by rows in which row n lists n terms, starting with n, such that the difference between successive terms is equal to n^4 - 1 = A123865(n).
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n + 1) : get(n, k - 1).add(Z.valueOf(n + 1).pow(4)).subtract(1);
 * A162624 Triangle read by rows in which row n lists n terms, starting with n^4 + n - 1, such that the difference between successive terms is equal to n^4 - 1 = A123865(n).
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n + 1).pow(4).add(n) : get(n, k - 1).add(Z.valueOf(n + 1).pow(4)).subtract(1);
 * A163282 Triangle read by rows in which row n lists n+1 terms, starting with n^2 and ending with n^3, such that difference between successive terms is equal to n^2 - n.
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n).pow(2) : get(n, k - 1).add(Z.valueOf(n).multiply(n - 1));
 * A163283 Triangle read by rows in which row n lists n+1 terms, starting with n^3 and ending with n^4, such that the difference between successive terms is equal to n^3 - n^2.
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n).pow(3) : get(n, k - 1).add(Z.valueOf(n).pow(2).multiply(n - 1));
 * A163284 Triangle read by rows in which row n lists n+1 terms, starting with n^4 and ending with n^5, such that the difference between successive terms is equal to n^4 - n^3.
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n).pow(4) : get(n, k - 1).add(Z.valueOf(n).pow(3).multiply(n - 1));
 * A163285 Triangle read by rows in which row n lists n+1 terms, starting with n^5 and ending with n^6, such that the difference between successive terms is equal to n^5 - n^4.
  protected Z compute(final int n, final int k) {
    return k == 0 ? Z.valueOf(n).pow(5) : get(n, k - 1).add(Z.valueOf(n).pow(4).multiply(n - 1));
 * A163626 Triangle read by rows: The n-th derivative of the logistic function written in terms of y, where y = 1/(1 + exp(-x)).
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k).multiply(k + 1).subtract(get(n - 1, k - 1).multiply(k));
 * A163676 Triangle T(n,m) = 4mn + 2m + 2n - 1 read by rows.
  public Z compute(final int n, final int k) {
 * A165447 T(n,k) = n^4 - 2*k^2*n^2 + k^4 = A120070(n, k)^2.
  public Z compute(final int n, final int k) {
 * A166279 Triangle, read by rows: T(0,0) = 1, T(n,k) = T(n-1,k-1) (mod 2) + T(n-1,k) (mod 2), T(n,k) = 0 if k &lt; 0 or k &gt; n.
  protected Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k - 1).mod(Z.TWO).add(get(n - 1, k).mod(Z.TWO));
 * A166350 Table T(n,m) = m! read by rows.
  public Z compute(final int n, final int k) {
    return k == 0 ? Z.ONE : get(n, k - 1).multiply(k + 1);
 * A166692 Triangle T(n,k) read by rows: T(n,k) = 2^(k-1), k&gt;0. T(n,0) = (n+1) mod 2.
  public Z compute(final int n, final int k) {
 * A166918 Triangle T(n,k) read by rows: T(n,0) = n mod 2. T(n,k) = 2^(k-1), 0&lt;k&lt;=n.
  public Z compute(final int n, final int k) {
 * A167192 Triangle read by rows: T(n,k) = (n-k)/gcd(n,k), 1 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A168281 Triangle T(n,m) = 2*(min(n - m + 1, m))^2 read by rows.
  public Z compute(final int n, final int k) {
 * A169603 Table T(n,k) = k*(4*n+2+k) read by rows.
  protected Z compute(final int n, final int k) {
 * A171232 Array read by antidiagonals, T(n,k) = 2*(n/k) - 1, if n mod k = 0; otherwise, T(n,k) = 1.
  public Z matrixElement(final int n, final int k) {
 * A171233 Array, T(n,k) = 2*(n/k), if n mod k = 0; otherwise, T(n,k) = 1. Read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A172292 Triangle read by rows: T(n, k) = (2*n+1)*(2*k+1), n&gt;=1, 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A173541 Triangle read by rows: T(n,k)=k if k is a proper non-divisor of n, otherwise T(n,k)=0 (1&lt;=k&lt;=n).
  public Z compute(final int n, final int k) {
 * A173787 Triangle read by rows: T(n,k) = 2^n - 2^k, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A175840 Mirror image of Nicomachus' table: T(n,k) = 3^(n-k)*2^k for n&gt;=0 and 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A176224 A symmetrical triangle sequence: T(n, k) = q^k + q^(n-k) - q^n, with q=2.
  protected Z compute(final int n, final int k) {
 * A176225 A symmetrical triangle sequence: T(n, k) = q^k + q^(n-k) - q^n, with q=3.
  protected Z compute(final int n, final int k) {
 * A176226 A symmetrical triangle sequence: T(n, k) = q^k + q^(n-k) - q^n, with q=5.
  protected Z compute(final int n, final int k) {
 * A176227 A symmetrical triangle sequence: T(n, k) = q^k + q^(n-k) - q^n, with q=4.
  protected Z compute(final int n, final int k) {
 * A176270 Triangle T(n,m) = 1 + m*(m-n) read by rows, 0 &lt;= m &lt;= n.
  public Z compute(final int n, final int k) {
 * A176293 Triangle T(n,k) = 1 + 2*k*(n-k)*(n-1)^2, read by rows.
  public Z compute(final int n, final int k) {
 * A176625 T(n,k) = 1 + 3*k*(k - n), triangle read by rows (n &gt;= 0, 0 &lt;= k &lt;= n).
  public Z compute(final int n, final int k) {
 * A176627 Triangle T(n, k) = 12^(k*(n-k)), read by rows.
  public Z compute(final int n, final int k) {
 * A176798 Triangle read by rows: T(n,m)=1 + n*(2*m + 1 + n)/2, 0&lt;=m&lt;=n.
  public Z compute(final int n, final int k) {
 * A176891 Triangle T(n,k) = k if k&lt;n and k|n, = 0 otherwise, 1 &lt;= k &lt;= n; read by rows.
  public Z compute(final int n, final int k) {
 * A177990 Triangle read by rows, variant of A070909, a cellular automaton.
  public Z compute(final int n, final int k) {
 * A178067 Triangle read by rows: T(n,k) = (n^2 + k)*(n - k + 1)/2.
  public Z compute(final int n, final int k) {
 * A178166 10^a(n) Pascal triangle, where a(n) = A007318(n).
 * A179900 Triangle T(n,k) read by rows: coefficient of [x^k] of the polynomial p_n(x)=(5-x)*p_{n-1}(x)-p_{n-2}(x), p_0=1, p_1=5-x.
  public Z compute(final int n, final int k) {
    return n < 2 ? super.compute(n, k) : get(n - 1, k).multiply(5).subtract(get(n - 1, k - 1)).subtract(get(n - 2, k));
 * A180662 The Golden Triangle: T(n,k) = A001654(k) for n&gt;=0 and 0&lt;=k&lt;=n.
  protected Z compute(final int n, final int k) {
 * A180663 Mirror image of the Golden Triangle: T(n,k) = A001654(n-k) for n&gt;=0 and 0&lt;=k&lt;=n. 
  protected Z compute(final int n, final int k) {
 * A181543 Triangle of cubed binomial coefficients, T(n,k) = C(n,k)^3, read by rows.
 * A182828 Array of the numbers (3*i+1)*3^j, i&gt;=0, j&gt;=0, read by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A182830 Array of the numbers (3*i+2)*3^j, i&gt;=0, j&gt;=0, read by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A185730 Array by antidiagonals: T(n,k) = k*(k+1)*n*(n+1)*(k*n-n+2*k+7)/36.
  public Z matrixElement(final int i, final int j) {
 * A185731 Array by antidiagonals: T(n,k)=F*(k*n-n+3*k+13), where F = k*(k+1)*(k+2)*n*(n+1)*(n+2)/576.
  public Z matrixElement(final int i, final int j) {
 * A185738 Rectangular array T(n,k) = 2^n + k - 2, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A185778 Second weight array of Pascal's triangle (formatted as a rectangle), by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A185780 Array T(n,k) = k*(n*k-n+1), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A185782 Weight array of A185780, by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A185868 (Odd,odd)-polka dot array in the natural number array A000027, by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A185869 (Odd,even)-polka dot array in the natural number array A000027; read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A185870 (Even,odd)-polka dot array in the natural number array A000027, by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A185871 (Even,even)-polka dot array in the natural number array A000027, by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A185877 Array T given by T(n,k) = k^2 +(2*n-3)*k -2*n +3, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A185879 Weight array of A185877, by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A185905 Rectangular array binomial(k+3,4)*binomial(n+3,4), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A185907 Weight array of A185908, by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A185908 Array: T(n,k) = n-1 + min{n,k}, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A185910 Array: T(n,k) = n^2 + k - 1, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A185911 Weight array of A185910, by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A185914 Array: T(n,k)=k-n+1 for k&gt;=n; T(n,k)=0 for k&lt;n; by antidiagonals.
  public Z matrixElement(int n, int k) {
 * A185916 Weight array of A185914, by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A185917 Weight array of max{n,k}, by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A187760 Table T(n,k) read by antidiagonals. T(n,k)=n-k+1, if n&gt;=k, T(n,k)=k-n+2, if n &lt; k.
  public Z matrixElement(final int n, final int k) {
 * A191532 Triangle T(n,k) read by rows: T(n,n) = 2n+1, T(n,k)=k for k&lt;n.
  public Z compute(final int n, final int k) {
 * A191904 Square array read by antidiagonals up: T(n,k) = 1-k if k divides n, else 1.
  public Z matrixElement(final int n, final int k) {
 * A191907 Square array read by antidiagonals up: T(n,k) = -(n-1) if n divides k, else 1.
  public Z matrixElement(final int n, final int k) {
 * A192915 Triangle read by rows: T(n,k) = Sum_{j=0..3} binomial(n+3, k+j), 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
      return get(n - 1, k - 1).add(get(n - 1, k));
 * A193588 A Fibonacci triangle: T(n,k) = Fib(k+2) for 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
      return get(n, k - 2).add(get(n, k - 1));
 * A193592 Triangle read by rows having n-th row 1, n, n-1, n-2,..., 2, 1 for n&gt;=0.
  public Z compute(final int n, final int k) {
 * A193596 Triangle given by p(n,k) = ceiling(C(n,k)/2).
 * A193632 Triangle: T(n,k)=C(4n-1,2k), 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A193633 Triangle: T(n,k)=C(4n,2k), 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A193634 Triangle: T(n,k)=C(4n+1,2k), 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A193635 Triangle: T(n,k)=C(3n-k,k), 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A193636 Triangle: T(n,k) = C(3n-2k,k), 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A193770 Table T(m,n) = (5^m + 3^n)/2, m,n = 0,1,2,..., read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A195151 Square array read by antidiagonals upwards: T(n,k) = n*((k-2)*(-1)^n+k+2)/4, n &gt;= 0, k &gt;= 0.
  public Z matrixElement(final int n, final int k) {
 * A195916 Table with T(n,n) = n, T(n,k) = xor(T(n-1,k-1), T(n-1,k)).
  public Z compute(final int n, final int k) {
    return k == 0 ? Z.ONE : (k == n ? Z.valueOf(n + 1) : get(n - 1, k - 1).xor(get(n - 1, k)));
 * A201651 Bit-interleaved number addition table (cf. A054240) as triangle read by rows: T(n,k) = n and k added in binary representation, where carries shift 2 instead of 1, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A202451 Upper triangular Fibonacci matrix, by SW antidiagonals.
  public Z compute(final int n, final int k) {
 * A202670 Symmetric matrix based on A000290 (the squares), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A202750 Triangle T(n,k) = binomial(n,k)^4 read by rows, 0&lt;=k&lt;=n.
 * A203990 Symmetric matrix based on f(i,j) = (i+j)*min(i,j), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A203994 Symmetric matrix based on f(i,j) = (i+j)*min{i,j}, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A203996 Symmetric matrix based on f(i,j)=min{i(j+1),j(i+1)}, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A203998 Symmetric matrix based on f(i,j)=max{i(j+1)-1,j(i+1)-1}, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204000 Symmetric matrix based on f(i,j)=min{i(j+1)-1,j(i+1)-1}, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204002 Symmetric matrix based on f(i,j)=min{2i+j,i+2j}, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204004 Symmetric matrix based on f(i,j) = max{2i+j-2,i+2j-2}, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204006 Symmetric matrix based on f(i,j)=min{2i+j-2,i+2j-2}, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204008 Symmetric matrix based on f(i,j) = max{3i+j-3,i+3j-3}, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204012 Symmetric matrix based on f(i,j)=min{3i+j-3,i+3j-3}, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204014 Symmetric matrix based by antidiagonals, based on f(i,j)=min{1+(j mod i), 1+( i mod j)}.
  public Z matrixElement(final int i, final int j) {
 * A204016 Symmetric matrix based on f(i,j) = max{j mod i, i mod j), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204018 Symmetric matrix based on f(i,j)=1+max{j mod i, i mod j), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204022 Symmetric matrix based on f(i,j) = max(2i-1, 2j-1), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204026 Symmetric matrix based on f(i,j)=min(F(i+1),F(j+1)), where F=A000045 (Fibonacci numbers), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204028 Symmetric matrix based on f(i,j)=min(3i-2,3j-2), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204030 Symmetric matrix based on f(i,j) = gcd(i+1, j+1), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204112 Symmetric matrix based on f(i,j) = gcd(F(i+1), F(j+1)), where F=A000045 (Fibonacci numbers), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204114 Symmetric matrix based on f(i,j) = gcd(L(i), L(j)), where L=A000032 (Lucas numbers), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204116 Symmetric matrix based on f(i,j) = gcd(2^i-1, 2^j-1), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204118 Symmetric matrix based on f(i,j) = gcd(prime(i), prime(j)), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204120 Symmetric matrix based on f(i,j) = gcd(prime(i+1),prime(j+1)), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204123 Symmetric matrix based on f(i,j)=max([i/j],[j/i]), where [ ]=floor, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204125 Symmetric matrix based on f(i,j)=(i if i=j and 1 otherwise), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204127 Symmetric matrix based on f(i,j)=(F(i+1) if i=j and 1 otherwise), where F=A000045 (Fibonacci numbers), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204129 Symmetric matrix based on f(i,j)=(L(i) if i=j and 1 otherwise), where L=A000032 (Lucas numbers), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204131 Symmetric matrix based on f(i,j)=(2i-1 if i=j and 1 otherwise), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204133 Symmetric matrix based on f(i,j)=(2^(i-1) if i=j and 1 otherwise), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204143 Symmetric matrix based on f(i,j)=max(ceiling(i/j),ceiling(j/i)), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204154 Symmetric matrix based on f(i,j) = max(2i-j, 2j-i), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204156 Symmetric matrix based on f(i,j)=max(3i-j, 3j-i), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204158 Symmetric matrix based on f(i,j)=max(3i-2j, 3j-2i), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204160 Symmetric matrix based on f(i,j)=(3i-2 if i=j and = 0 otherwise), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204162 Symmetric matrix based on f(i,j) = (floor((i+1)/2) if i=j and = 1 otherwise), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204164 Symmetric matrix based on f(i,j)=floor[(i+j)/2], by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204166 Symmetric matrix based on f(i,j)=ceiling[(i+j)/2], by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204171 Symmetric matrix based on f(i,j)=(1 if max(i,j) is odd, and 0 otherwise), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204173 Symmetric matrix based on f(i,j)=(2i-1 if max(i,j) is odd, and 0 otherwise), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204175 Symmetric matrix based on f(i,j)=(1 if max(i,j) is even, and 0 otherwise), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204177 Symmetric matrix based on f(i,j)=(1 if i=1 or j=1 or i=j, and 0 otherwise), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204179 Symmetric matrix based on f(i,j) defined by f(i,1)=f(1,j)=1; f(i,i)= i; f(i,j)=0 otherwise; by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204181 Symmetric matrix based on f(i,j) defined by f(i,1)=f(1,j)=1; f(i,i)= 2i-1; f(i,j)=0 otherwise; by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204183 Symmetric matrix based on f(i,j) defined by f(i,1)=f(1,j)=1; f(i,i)= (-1)^(i-1); f(i,j)=0 otherwise; by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204237 Symmetric matrix given by f(i,j)=max(3i-j,3j-i).
  public Z matrixElement(final int i, final int j) {
 * A204242 Infinite symmetric matrix given by f(i,1)=1, f(1,j)=1, f(i,i)=2^i-1 and f(i,j)=0 otherwise, read by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204244 Symmetric matrix given by f(i,1)=1, f(1,j)=1, f(i,i)=i! and f(i,j)=0 otherwise.
  public Z matrixElement(final int i, final int j) {
 * A204250 Symmetric matrix read by antidiagonals given by T(i,j)=i*j+i+j-2.
  public Z matrixElement(final int i, final int j) {
 * A204253 Symmetric matrix given by f(i,j)=1+[(i+j) mod 3].
  public Z matrixElement(final int i, final int j) {
 * A204255 Symmetric matrix given by f(i,j)=1+[(i+j) mod 4].
  public Z matrixElement(final int i, final int j) {
 * A204257 Matrix given by f(i,j)=1+[(i+2j) mod 3], by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204259 Matrix given by f(i,j) = 1 + [(2i+j) mod 3], by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204260 Symmetric matrix given by f(i,j)=ceiling(i*j/(i+j)) .
  public Z matrixElement(final int i, final int j) {
 * A204263 Symmetric matrix: f(i,j)=(i+j mod 3), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204267 Symmetric matrix: f(i,j)=(i+j+1 mod 3), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204269 Symmetric matrix: f(i,j)=floor[(i+j+2)/4]-floor[(i+j)/4], by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204421 Symmetric matrix: f(i,j)=(i+j+2 mod 3), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204423 Infinite matrix: f(i,j)=(2i+j mod 3), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204425 Infinite matrix: f(i,j)=(2i+j+1 mod 3), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204427 Infinite matrix: f(i,j)=(2i+j+2 mod 3), read by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204429 Symmetric matrix: f(i,j)=(2*i + 2*j) mod 3, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204431 Symmetric matrix: f(i,j)=(2i+j+1 mod 3), by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204433 Symmetric matrix: f(i,j) = (2*i + 2*j + 2) mod 3, by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204435 Symmetric matrix: f(i,j)=((i+j)^2 mod 3), read by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204437 Symmetric matrix: f(i,j)=((i+j+1)^2 mod 3), by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204439 Symmetric matrix: f(i,j)=((i+j+2)^2 mod 3), by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204441 Symmetric matrix: f(i,j)=floor[(i+j+2)/4]-floor[(i+j-1)/4], by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204443 Symmetric matrix: f(i,j)=floor[(i+j+3)/4]-floor[(i+j)/4], by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204445 Symmetric matrix: f(i,j)=floor[(i+j+4)/4]-floor[(i+j+1)/4], by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204447 Symmetric matrix: f(i,j)=floor[(i+j+5)/4]-floor[(i+j+2)/4], by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204545 Symmetric matrix: f(i,j)=floor[(i+j+3)/4]-floor[(i+j+1)/4], by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204547 Symmetric matrix: f(i,j)=floor[(i+j+4)/4]-floor[(i+j+2)/4], by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204549 Symmetric matrix: f(i,j)=floor[(i+j+5)/4]-floor[(i+j+3)/4], by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204551 Symmetric matrix: f(i,j)=floor[(2i+2j+1)/4]-floor[(i+j)/4], by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204553 Symmetric matrix: f(i,j)=floor[(2i+2j+2)/4]-floor[(i+j+1)/4], by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204560 Symmetric matrix: f(i,j)=floor[(2i+2j+4)/4]-floor[(i+j+2)/4], by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A204562 Symmetric matrix: f(i,j) = floor((2i+2j+6)/4)-floor((i+j+3)/4), by (constant) antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A205456 Symmetric matrix by antidiagonals: C(max(i,j),min(i,j)), i&gt;=1, j&gt;=1.
  public Z matrixElement(final int i, final int j) {
 * A205457 Symmetric matrix, by antidiagonals: C(max(2i,2j),min(2i,2j)), i&gt;=0, j&gt;=0.
  public Z matrixElement(final int i, final int j) {
 * A205545 Symmetric matrix by antidiagonals:  C(max(3i,3j),min(3i,3j)), i&gt;=0, j&gt;=0.
  public Z matrixElement(final int i, final int j) {
 * A205548 Symmetric matrix by antidiagonals:  C(max(i+1,j+1),min(i+1,j+1)), i&gt;=1, j&gt;=1.
  public Z matrixElement(final int i, final int j) {
 * A205549 Symmetric matrix by antidiagonals: C(max(i+2,j+2),min(i+2,j+2)), i&gt;=1, j&gt;=1.
  public Z matrixElement(final int i, final int j) {
 * A205550 Symmetric matrix by antidiagonals: C(max(g(i),g(j)),min(g(i),g(j)), where g(k)=2k-1.
  public Z matrixElement(final int i, final int j) {
 * A205552 Square array: C(max(2i-2,j-1),min(2i-2,j-1)), i&gt;=1, j&gt;=1; by antidiagonals.
  public Z matrixElement(final int i, final int j) {
 * A205553 Square array by antidiagonals: C(max(i-1,2j-2),min(i-1,2j-2)), i&gt;=1, j&gt;=1.
  public Z matrixElement(final int i, final int j) {
 * A207260 Triangle T(n,k) with T(n,k) = k^2 + (1-(-1)^(n-k))/2.
  public Z compute(final int n, final int k) {
 * A210874 Triangular array U(n,k) of coefficients of polynomials defined in Comments.
  public Z compute(final int n, final int k) {
      return super.compute(n, k);
      return Z.valueOf(n + 1).add(get(n - 1, 0));
      return get(n - 1, k - 1).add(get(n - 2, k - 2));
 * A211377 T(n,k) = ((k + n)^2 - 4*k + 3 + (-1)^k - (k + n - 2)*(-1)^(k + n))/2; n, k &gt; 0, read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A211394 T(n,k) = (k+n)*(k+n-1)/2-(k+n-1)*(-1)^(k+n)-k+2; n , k &gt; 0, read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A212362 Triangle by rows, binomial transform of the beheaded Pascal's triangle A074909.
  public Z compute(final int n, final int k) {
 * A213081 Exclusive-or based Pascal triangle, read by rows: T(n,1)=T(n,n)=n and T(n,k) = T(n-1,k-1) XOR T(n-1,k), where XOR is the bitwise exclusive-or operator.
  public Z compute(final int n, final int k) {
    return k == 0 || k == n ? Z.valueOf(n + 1) : get(n - 1, k - 1).xor(get(n - 1, k));
 * A213171 T(n,k) = ((k+n)^2 - 4*k + 3 - (-1)^n - (k+n)*(-1)^(k+n))/2; n, k &gt; 0, read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A213197 T(n,k) = (2*(n+k)^2 - 2*(n+k) - 4*k + 6 + (2*k-2)*(-1)^n + (2*k-1)*(-1)^k + (-2*n+1)*(-1)^(n+k))/4; n, k &gt; 0, read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A213205 T(n,k) = ((k+n)^2-4*k+3+(-1)^k-2*(-1)^n-(k+n)*(-1)^(k+n))/2; n , k &gt; 0, read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A215630 Triangle read by rows: T(n,k) = n^2 - n*k + k^2, 1 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A215631 Triangle read by rows: T(n,k) = n^2 + n*k + k^2, 1 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A216201 Square array T, read by antidiagonals : T(n,k) = 0 if n-k&gt;=3 or if k-n&gt;=4, T(2,0) = T(1,0) = T(0,0) = T(0,1) = T(0,2) = T(0,3) = 1, T(n,k) = T(n-1,k) + T(n,k-1).
  protected Z compute(final int n, final int k) {
    } else if (get(n - 2, k - 1).equals(Z.ZERO)) {
      result = get(n - 1, k - 1).add(get(n - 1, k)); // Pascal's rule
 * A219069 Triangle read by rows: T(n,k) = n^4 + (n*k)^2 + k^4, 1 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A220508 T(n,k) = n^2 + k if k &lt;= n, otherwise T(n,k) = k*(k + 2) - n; square array T(n,k) read by ascending antidiagonals (n &gt;= 0, k &gt;= 0).
  public Z matrixElement(final int n, final int k) {
 * A230445 Triangle read by rows: T(n,m) = 3^m*2^(n-m)-1, the number of neighbors in an n-dimensional cubic array.
  public Z compute(final int n, final int k) {
 * A233543 Table T(n,m) = m! read by rows.
  public Z compute(final int n, final int k) {
    return k == 0 ? Z.ONE : get(n, k - 1).multiply(k);
 * A233757 Triangle read by rows: T(n,k) = (2^n-1)*2^(k-1), for n &gt;= 1 and 1&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A234575 Triangle T(n,k) read by rows: T(n,k) = floor(n/k) + n mod k, with 1&lt;=k&lt;=n.
  public Z compute(int n, int k) {
 * A236532 Triangle T(n,k) read by rows: T(n,k) = floor(n*k/(n+k)), with 1 &lt;= k &lt;= n.
  public Z compute(int n, int k) {
 * A237587 Triangle read by rows in which row n lists the first n odd squares in decreasing order.
  protected Z compute(int n, int k) {
 * A241747 Triangle read by rows: T(n,k) = (4*n+3)*(4*k+3).
  protected Z compute(final int n, final int k) {
 * A241957 Rectangular array A read by upward antidiagonals in which the entry in row n and column k is defined by A(n,k) = 2^n*(2*k - 1) - 1, n,k &gt;= 1.
  public Z matrixElement(final int n, final int k) {
 * A242388 Triangle read by rows: T(n,k) = n*2^(k-1) + 1, 1 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A244418 Triangle read by rows T(n,m) = n*m +(n-1)*(m-1), for n &gt;= m &gt;= 1.
  public Z compute(final int n, final int k) {
 * A244422 Quasi-Riordan triangle ((2-z)/(1-z), -z^2/(1-z)). Row reversed monic Chebyshev T-polynomials without vanishing columns.
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.TWO : (k == 0 ? Z.ONE : get(n - 1, k).subtract(get(n - 2, k - 1)));
 * A245235 Repeat 2^(n*(n+1)/2) n+1 times.
  protected Z compute(final int n, final int k) {
 * A245300 Triangle T(n,k) = (n+k)*(n+k+1)/2 + k, 0 &lt;= k &lt;= n, read by rows.
  public Z compute(final int n, final int k) {
 * A245334 A factorial-like triangle read by rows: T(0,0) = 1; T(n+1,0) = T(n,0)+1; T(n+1,k+1) = T(n,0)*T(n,k), k=0..n.
  public Z compute(final int n, final int k) {
      return get(n - 1, 0).add(1);
      return get(n - 1, 0).multiply(get(n - 1, k - 1));
 * A255044 Array A read by upward antidiagonals: A(n,k) = ((2*n+1)*9^k-1)/2, n,k &gt;= 0.
  public Z matrixElement(final int n, final int k) {
 * A255517 Number A(n,k) of rooted identity trees with n nodes and k-colored non-root nodes; square array A(n,k), n&gt;=0, k&gt;=0, read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A256497 Triangle read by rows, sums of 2 distinct nonzero cubes: T(n,k) = (n+1)^3+k^3, 1 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A256560 Triangle read by rows, sums of 2 distinct nonzero squares plus sums of 2 distinct nonzero cubes: T(n,k) = n^2 + k^2 + n^3 + k^3, 1 &lt;= k &lt;= n-1.
  public Z compute(final int n, final int k) {
 * A257499 Array A read by upward antidiagonals in which the entry in row n and column k is defined by A(n,k) = (1 + 2^n*(6*k-3+2*(-1)^n))/3, n,k &gt;= 1.
  public Z matrixElement(final int n, final int k) {
 * A257791 Rectangular array A read by upward antidiagonals in which the entry in row n and column k is defined by A(n,k) = 2^(n+1)*(2*k - 1), n,k &gt;= 1.
  public Z matrixElement(final int n, final int k) {
 * A257943 Array A read by upward antidiagonals in which the entry in row n and column k is defined by A(n,k) = (1 + 3^(n-1)*(2*k - 1))/2, n,k &gt;= 1.
  public Z matrixElement(final int n, final int k) {
 * A258415 Array A read by upward antidiagonals in which the entry in row n and column k is defined by A(n,k) = (2 + 2^(n-1)*(6*k - 3 + 2*(-1)^n))/3, n,k &gt;= 1.
  public Z matrixElement(final int n, final int k) {
 * A261642  Triangle, read by rows, where T(n,k) = (k^2 + k)^(n-k) for k=1..n and n&gt;=1.
  public Z compute(final int n, final int k) {
 * A262616 Triangle read by rows: T(n,k) = 4^(n-k), n&gt;=0, 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A265129 Triangle read by rows, formed as the sum of the two versions of the natural numbers filling an equilateral triangle. 
  protected Z compute(final int n, final int k) {
 * A266577 Square array read by descending antidiagonals: T(n,k) = ((2^(n+1) + 1)^(k-1) + 1)/2.
  public Z matrixElement(final int n, final int k) {
 * A268434 Triangle read by rows, Lah numbers of order 2, T(n,n) = 1, T(n,k) = 0 if k&lt;0 or k&gt;n, otherwise T(n,k) = T(n-1,k-1)+((n-1)^2+k^2)*T(n-1,k), for n&gt;=0 and 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k - 1).add(get(n - 1, k).multiply((n - 1) * (long) (n - 1) + k * (long) k));
 * A269944 Triangle read by rows, Stirling cycle numbers of order 2, T(n,n) = 1, T(n,k) = 0 if k&lt;0 or k&gt;n, otherwise T(n,k) = T(n-1,k-1)+(n-1)^2*T(n-1,k), for n&gt;=0 and 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k - 1).add(get(n - 1, k).multiply((n - 1) * (n - 1)));
 * A269945 Triangle read by rows, Stirling set numbers of order 2, T(n,n) = 1, T(n,k) = 0 if k&lt;0 or k&gt;n, otherwise T(n,k) = T(n-1,k-1)+k^2*T(n-1, k), for n&gt;=0 and 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k - 1).add(get(n - 1, k).multiply(k * (long) k));
 * A269946 Triangle read by rows, Lah numbers of order 3, T(n,n) = 1, T(n,k) = 0 if k&lt;0 or k&gt;n, otherwise T(n,k) = T(n-1,k-1)+((n-1)^3+k^3)*T(n-1, k), for n&gt;=0 and 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k - 1).add(get(n - 1, k).multiply(Z.valueOf(n - 1).pow(3).add(Z.valueOf(k).pow(3))));
 * A269947 Triangle read by rows, Stirling cycle numbers of order 3, T(n,n) = 1, T(n,k) = 0 if k&lt;0 or k&gt;n, otherwise T(n,k) = T(n-1,k-1)+(n-1)^3*T(n-1,k), for n&gt;=0 and 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k - 1).add(get(n - 1, k).multiply(Z.valueOf(n - 1).pow(3)));
 * A269948 Triangle read by rows, Stirling set numbers of order 3, T(n,n) = 1, T(n,k) = 0 if k&lt;0 or k&gt;n, otherwise T(n,k) = T(n-1,k-1)+k^3*T(n-1, k), for n&gt;=0 and 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k - 1).multiply(1).add(get(n - 1, k).multiply(Z.valueOf(k).pow(3)));
 * A271025 A(n, k) is the n-th binomial transform of the Catalan sequence (A000108) evaluated at k. Array read by descending antidiagonals for n &gt;= 0 and k &gt;= 0.
  public Z matrixElement(final int i, final int j) {
 * A274602 Triangle read by rows: T(n,k) = k*(n-k+1)^2 + n - k, 0 &lt;= k &lt;= n.
  protected Z compute(final int n, final int k) {
 * A275043 Number A(n,k) of set partitions of [k*n] such that within each block the numbers of elements from all residue classes modulo k are equal for k&gt;0, A(n,0)=1; square array A(n,k), n&gt;=0, k&gt;=0, read by antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A276158 Triangle read by rows: T(n,k) = 6*k*(n + 1 - k) for 0 &lt; k &lt;= n; for k = 0, T(n,0) = n + 1.
  public Z compute(final int n, final int k) {
 * A281385 Triangular array T(n, k) = n^2 + n*k - k^2.
  public Z compute(final int n, final int k) {
 * A285061 Sheffer triangle S2[4,1] = (exp(x), exp(4*x) - 1).
  public Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k - 1).multiply(4).add(get(n - 1, k).multiply(1 + 4 * k));
 * A285192 Array read by antidiagonals: T(n,k) = n*k*(3+n*k)/2 (n &gt;= 0, k &gt;= 0).
  public Z matrixElement(final int n, final int k) {
 * A285425 Square array A(n,k), n&gt;=1, k&gt;=0, read by antidiagonals, where column k is the expansion of Sum_{j&gt;=1} (2*j - 1)^k*x^(2*j-1)/(1 - x^(2*j-1)).
  public Z matrixElement(final int n, final int k) {
 * A286100 Square array A(n,k): If n = k, then A(n,k) = n, otherwise 0, read by antidiagonals as A(1,1), A(1,2), A(2,1), A(1,3), A(2,2), A(3,1), etc.
  public Z matrixElement(final int n, final int k) {
 * A286561 Square array A(n,k): A(n,1) = 1, and for k &gt; 1, A(n,k) = the highest exponent e such that k^e divides n, read by descending antidiagonals as A(1,1), A(1,2), A(2,1), etc.
  public Z matrixElement(final int n, final int k) {
 * A286563 Triangular table T(n,k) read by rows: T(n,1) = 1, and for 1 &lt; k &lt;= n, T(n,k) = the highest exponent e such that k^e divides n.
  public Z compute(int n, int k) {
 * A287326 Triangle read by rows: T(n, k) = 6*k*(n-k) + 1; n &gt;= 0, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A288870 Triangle T from array A(k,n) = (2*k+1)*2^n + 1, k &gt;=0, n &gt;= 0 read by downwards antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A293600 G.f. A(x,y) = Sum_{-oo..+oo} (x - y^n)^(n+1), as a flattened rectangular array of coefficients T(n,k) of x^n * y^(k*(n+k-1)) in A(x,y) for n&gt;=1.
  public Z compute(final int n, final int k) {
      return super.compute(n, k);
      final Z result = get(n - 1, k - 1).abs().add(get(n - 1, k).abs());
 * A296180 Triangle read by rows: T(n, k) = 3*(n - k)*k + 1, n &gt;= 0, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A300656 Triangle read by rows: T(n,k) = 30*k^2*(n-k)^2 + 1; n &gt;= 0, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A300785 Triangle read by rows: T(n,k) = 140*k^3*(n-k)^3 - 14*k*(n-k) + 1; n &gt;= 0, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A303872 Triangle read by rows: T(0,0) = 1; T(n,k) = -T(n-1,k) + 2 T(n-1,k-1) for k = 0,1,...,n; T(n,k)=0 for n or k &lt; 0.
  protected Z compute(final int n, final int k) {
    return n == 0 ? Z.ONE : get(n - 1, k - 1).multiply2().subtract(get(n - 1, k));
 * A309557 Number triangle with T(n,k) = 2 + 3*n - 2*k + 2*k*(n-k) for n &gt;= 0, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A309559 Triangle read by rows: T(n,k) = 1 + n + k^2/2 - k/2 + k*(n-k), n &gt;= 0, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A317617 Triangle T read by rows: T(n, k) = (n^3 + n)/2 + (k - (n + 1)/2)*(n mod 2).
  public Z compute(int n, int k) {
 * A318274 Triangle read by rows: T(n,k) = n for 0 &lt; k &lt; n and T(n,0) = T(n,n) = 1.
  public Z compute(final int n, final int k) {
 * A321490 Triangular table T[n,k] = (n+k)(n^2+k^2), 1 &lt;= k &lt;= n = 1, 2, 3, ...; read by rows.
  public Z compute(final int n, final int k) {
 * A321500 Triangular table T(n,k) = (n+k)*(n^2+k^2), n &gt;= k &gt;= 0; read by rows n = 0, 1, 2, ...
  public Z compute(final int n, final int k) {
 * A323956 Triangle read by rows: T(n, k) = 1 + n * (n - k) for 1 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A325516 Triangle read by rows: T(n, k) = (1/4)*n*(1 - (-1)^(n - k) + 2*(n - k)^2), with 0 &lt;= k &lt; n.
  public Z compute(final int n, final int k) {
 * A326822 T(n, k) = k^0 if k = 1 else 0^n. Triangle read by rows, T(n, k) for 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A329854 Triangle read by rows: T(n,k) = ((n - k)*(n + k - 1) + 2)/2, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A330613 Triangle read by rows: T(n, k) = 1 + k - 2*n - 2*k*n + 2*n^2, with 0 &lt;= k &lt; n.
  public Z compute(final int n, final int k) {
 * A332790 Triangle read by rows: T(n,k) = 1 + 2*n + k + 5*k(n-k) for n &gt;= 0, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A333119 Triangle T read by rows: T(n, k) = (n - k)*(1 - (-1)^k + 2*k)/4, with 0 &lt;= k &lt; n.
  public Z compute(final int n, final int k) {
 * A335821 Triangular array T(n, k) = n^2 - k^2, read by rows.
  public Z compute(final int n, final int k) {
 * A336194 Table read by antidiagonals upwards: T(n,k) = (n - 1)*k^3 - 1, with n &gt; 1 and k &gt; 0.
  public Z matrixElement(final int n, final int k) {
 * A336858 Triangle read by rows: T(n,k) = T(n,k-1) + T(n-1, k) + T(n-1,k-1) with T(n,0) = T(n, n) = 1 (n &gt;= 0, 0 &lt;= k &lt;= n).
  public Z compute(final int n, final int k) {
    return k == 0 || k == n ? Z.ONE : get(n, k - 1).add(get(n - 1, k)).add(get(n - 1, k - 1));
 * A338198 Triangle read by rows, T(n,k) = ((k+1)*2^(n-k)-(k-2)*(-1)^(n-k))/3 for 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A338280 Triangle T read by rows: T(n, k) = k*n^(n-k-1) with 0 &lt; k &lt; n.
  public Z compute(final int n, final int k) {
 * A338432 Triangle read by rows: T(n, k) = (n - k + 1)^2 + 2*k^2, for n &gt;= 1, and k = 1, 2, ..., n.
  public Z compute(final int n, final int k) {
 * A339033 Triangle read by rows, T(n, k) for 0 &lt;= k &lt;= n. T(n, 0) = 0^n; T(n, n) = n!; otherwise T(n, k) = (n + 1 - k)*(k - 1)!.
  public Z compute(final int n, final int k) {
 * A341315 Triangle read by rows: T(n,k) = (n+k)/gcd(n,k), n&gt;=0, 0&lt;=k&lt;=n.
  public Z compute(final int n, final int k) {
 * A342138 Array T(n,k) = (n+k)*(3*n+3*k-5)/2 + (3*k+1), read by ascending antidiagonals.
  public Z matrixElement(final int n, final int k) {
 * A343125 Triangle T(k, n) = (n+3)*(k-n) - 4, k &gt;= 2, 1 &lt;= n &lt;= k-1, read by rows.
  public Z compute(int k, int n) {
 * A343237 Triangle T obtained from the array A(n, k) = (k+1)^(n+1) - k^(n+1), n, k &gt;= 0, by reading antidiagonals upwards.
  public Z matrixElement(final int n, final int k) {
 * A344110 Triangle read by rows: T(n,k) = 2^(n*k), n &gt;= 0, 0 &lt;= k &lt;= n.
  public Z compute(final int n, final int k) {
 * A346618 Triangle read by rows: T(n,k) = 1 iff 2 divides binomial(n,k) but 4 does not (0 &lt;= k &lt;= n).
 * A346619 Triangle read by rows: T(n,k) = 1 iff 4 divides binomial(n,k) but 8 does not (0 &lt;= k &lt;= n).
 * A347056 Triangle read by rows: T(n,k) = (n+1)*(n+2)*(k+3)*binomial(n,k)/6, 0 &lt;= k &lt;= n.
