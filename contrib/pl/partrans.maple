Alph := [a, b,c,d,e,f,g,h,y,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z]:
Pmatrix := proc(dim, a:=NULL)
   local n, k, m, w, g, M, T, A;
   if n = 0 then return [1] fi;
   if a = NULL then g := n -> Alph[n] else g := a fi;
   # Cache the input sequence.
   A := [seq(g(i), i=1..dim-1)]; print(`In:`, A);
   M := Matrix(dim, shape=triangular[lower]); M[1, 1] := 1;
   for m from 2 to dim do
       M[m, m] := M[m - 1, m - 1] * A[1];
       for k from m-1 by -1 to 2 do
           M[m, k] := expand(add(A[i]*M[m-i, k-1], i = 1..m-k+1))
       od;
   od;  
M end:

dim:=11;
M := Pmatrix(dim);
for r from 2 to dim do
    seq(printf(",%a", op(convert(linalg:-row(M, r), list))[i]),i=2..r);
    printf("\n");
od:
