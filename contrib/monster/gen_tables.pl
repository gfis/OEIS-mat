#!perl

# Generate the data tables for McKayThompsonSequence.java
# @(#) $Id$
# 2020-10-03, Georg Fischer
#
#:# Usage:
#:#     python gen_moonshine.py \
#:#     | perl gen_tables.pl > McKayThompsonTables.java
#
# Processes the output of gen_moonshine.py and surrounds the tables
# by the declaration of the Java class McKayThompsonTables

# Derived from <code>moonshine.py</code> of
# David A. Madore <david.madore@ens.fr> - 2007-07-31 - Public Domain
# Cf. https://web.archive.org/web/20130925003421/http://mathforum.org/kb/thread.jspa?forumID=253&threadID=1602206&messageID=5836094

use strict;
use integer;
use warnings;
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime (time);
my $timestamp = sprintf ("%04d-%02d-%02d %02d:%02d:%02d", $year + 1900, $mon + 1, $mday, $hour, $min, $sec);
$timestamp = sprintf ("%04d-%02d-%02d", $year + 1900, $mon + 1, $mday);

print <<'GFis'; # header
package irvine.oeis;

import java.util.HashMap;

/**
 * Data tables for {@link McKayThompsonSequence}.
 * @author Georg Fischer
 * Derived from <code>moonshine.py</code> of
 * David A. Madore <david.madore@ens.fr> - 2007-07-31 - Public Domain.
 * Cf. <code>https://web.archive.org/web/20130925003421/http://mathforum.org/kb/thread.jspa?forumID=253&threadID=1602206&messageID=5836094</code>
GFis
print <<"GFis";
 * This class was generated by https://github.com/gfis/OEIS-mat/blob/master/contrib/monster/gen_tables.pl on $timestamp
GFis
print <<'GFis';
 * DO NOT EDIT HERE !
 */
public class McKayThompsonTables {

  /** Number of different class codes in the ATLAS */
  public static final int MAX_CLASS = 194;

  /** Valid class codes mapped to sequential (zero-based) class index */
  public static final HashMap<String, Integer>  sClassMap = new HashMap<String, Integer >(MAX_CLASS);

  /** Class codes mapped to a list of class codes for powers */
  public static final HashMap<String, String[]> sPowerMap = new HashMap<String, String[]>(MAX_CLASS);

  /** Class codes mapped to a list of boot coefficients */
  public static final HashMap<String, Long[]>   sBootsMap = new HashMap<String, Long[]  >(MAX_CLASS);

  /** Class codes mapped to the number of interleaved zeroes to be skipped for the OEIS */
  public static final HashMap<String, Integer>  sStep0Map = new HashMap<String, Integer >(MAX_CLASS);

  /**
   * Add a mapping for a class code.
   * @param classCode map this ATLAS code, for example "18A"
   * @param classIndex map to this sequential, zero based number
   */
  private static void addClass(final String classCode, final Integer classIndex) {
    sClassMap.put(classCode, classIndex);
  }

  /**
   * Add a mapping for a power list.
   * @param classCode map this ATLAS code, for example "18A"
   * @param power a list of class codes for the powers
   */
  private static void addPower(final String classCode, final String[] power) {
    sPowerMap.put(classCode, power);
  }

  /**
   * Add a mapping for a boot coefficient list.
   * @param classCode map this ATLAS code, for example "18A"
   * @param boots a list of long coefficients for bootstrapping of the powers series
   */
  private static void addBoots(final String classCode, final long[] boots) {
    final Long[] bootL = new Long[boots.length];
    for (int i = 0; i < boots.length; ++i) {
        bootL[i] = boots[i];
    }
    sBootsMap.put(classCode, bootL);
  }

  /**
   * Add a mapping for the numbers of zeroes to skip.
   * @param classCode map this ATLAS code, for example "18A"
   * @param step0 number of interleaved zeroes which are skipped for the OEIS + 1
   */
  private static void addStep0(final String classCode, final int step0) {
    sStep0Map.put(classCode, Integer.valueOf(step0));
  }

  static {
GFis
#----
while (<>) { # print body
    s/\s*\Z//; # chompre
    my ($add, $code, $param, $index) = split(/\t/);
    if (0) {
    } elsif ($add eq "Power") {
        $param = "new String[] { $param }";
        print  "    addPower($code, $param); // $index\n";
    } elsif ($add eq "Boots") {
        my @boots = split(/\,/, $param);
        $param = join(",", map {
            $_ .= "L" if (length > 6);
            $_
            } @boots);
        $param = "new long[] { $param }";
        print  "    addBoots($code, $param); // $index\n";
        print  "    addStep0($code, " . &guess_zeroes($code, @boots) . ");\n";
    }
} # while body
print <<'GFis'; # manual patches
    
    // manual patches from gen_tables.pl:
    addStep0("12I",   2); // A058487
    addStep0("68A",   2); // A058742
    addStep0("52A",   2); // A058705
    addStep0("60A",   2); // A058725
    addStep0("84A",   2); // A058758
    addStep0("60F",   6); // A096938
    addStep0("24E",   6); // A112160
    addStep0("84B",   2); // A112211
    addStep0("88AB",  2); // A112213
    addStep0("93AB",  3); // A112217
    addStep0("104AB", 4); // A112219
GFis
#----
print <<'GFis'; # trailer
  } // end of static block

  /**
   * Test method
   */
  public static void main(String[] args) {
    String classCode = "1A";
    System.out.println("McKayThompsonTables test output");
    System.out.println("class: \"" + classCode + "\" -> " + sClassMap.get(classCode));

    System.out.print("power: \"" + classCode + "\" -> " );
    classCode = "119AB";
    final String[] powers = sPowerMap.get(classCode);
    String sep = "";
    for (int i = 0; i < powers.length; ++i) {
        System.out.print(sep + "\"" + powers[i] + "\"");
        sep = ",";
    }
    System.out.println();

    System.out.print("boots: \"" + classCode + "\" -> " );
    classCode = "2A";
    final Long[] boots = sBootsMap.get(classCode);
    sep = "";
    for (int i = 0; i < boots.length; ++i) {
        System.out.print(sep + boots[i]);
        sep = ",";
    }
    System.out.println();

    classCode = "1A";
    System.out.println("step0: \"" + classCode + "\" -> " + sStep0Map.get(classCode));
    classCode = "12C";
    System.out.println("step0: \"" + classCode + "\" -> " + sStep0Map.get(classCode));
    classCode = "12D";
    System.out.println("step0: \"" + classCode + "\" -> " + sStep0Map.get(classCode));
    classCode = "16B";
    System.out.println("step0: \"" + classCode + "\" -> " + sStep0Map.get(classCode));

  } // main

} // McKayThompsonTables
GFis
#----
sub guess_zeroes {
    my ($code, @boots) = @_;
    my $result = 1;
    if (0) {
    } elsif (    ($boots[0] eq "0") and ($boots[1] ne "0") 
             and ($boots[2] eq "0") and ($boots[3] ne "0")
             and ($boots[4] eq "0") and ($boots[5] ne "0")
            ) {
        $result = 2;
    } elsif (    ($boots[0] eq "0") and ($boots[1] eq "0")) { # determine the number of leading zeroes
        my $ind = 2;
        while($ind < scalar(@boots) - 1 and ($boots[$ind] eq "0")) {
            $ind ++;
        } # while
        if ($boots[$ind + 1] eq "0") {
            $result = $ind + 1;
        } else {
            $result = 1;
        }
    }
    return $result;
} # guess_zeroes
#----
__DATA__
    addBoots("12A", new long[] { 0,15,32,87,192,343 }); // 34
    addBoots("12B", new long[] { 0,6,-4,-3,12,-8 }); // 35
    addBoots("12C", new long[] { 0,7,0,15,0,71 }); // 36
    addBoots("12D", new long[] { 0,0,8,0,0,28 }); // 37
    addBoots("12E", new long[] { 0,-1,0,7,0,-9 }); // 38
    addBoots("12F", new long[] { 0,6,0,21,0,56 }); // 39
    addBoots("12G", new long[] { 0,-2,0,-3,0,8 }); // 40
    addBoots("12H", new long[] { 0,14,36,85,180,360 }); // 41
    addBoots("12I", new long[] { 0,2,0,1,0,0 }); // 42
    addBoots("12J", new long[] { 0,0,0,0,0,-4 }); // 43
    addBoots("16B", new long[] { 0,0,0,2,0,0 }); // 54
