#!perl

# Generate the data tables for McKayThompsonSequence.java
# @(#) $Id$
# 2020-10-03, Georg Fischer
 
# Derived from <code>moonshine.py</code> of
# David A. Madore <david.madore@ens.fr> - 2007-07-31 - Public Domain
# Cf. https://web.archive.org/web/20130925003421/http://mathforum.org/kb/thread.jspa?forumID=253&threadID=1602206&messageID=5836094 

use strict;
use integer;
use warnings;
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime (time);
my $timestamp = sprintf ("%04d-%02d-%02d %02d:%02d:%02d", $year + 1900, $mon + 1, $mday, $hour, $min, $sec);
$timestamp = sprintf ("%04d-%02d-%02d", $year + 1900, $mon + 1, $mday);

print <<'GFis'; # header
package irvine.oeis;

import java.util.HashMap;

/** 
 * Data tables for {@link McKayThompsonSequence}.
 * @author Georg Fischer
 * Derived from <code>moonshine.py</code> of
 * David A. Madore <david.madore@ens.fr> - 2007-07-31 - Public Domain.
 * Cf. <code>https://web.archive.org/web/20130925003421/http://mathforum.org/kb/thread.jspa?forumID=253&threadID=1602206&messageID=5836094</code>
 * This class was generated by https://github.com/gfis/joeis-lite/internal/fischer/mckay_tables.pl on 2020-10-02
 * DO NOT EDIT HERE !
 */
public class McKayThompsonTables {

  /** Number of different class codes in the ATLAS */
  public static final int MAX_CLASS = 194; 

  /** Valid class codes mapped to sequential (zero-based) class index */
  private static final HashMap<String, Integer>  sClassMap = new HashMap<String, Integer >(MAX_CLASS);

  /** Class codes mapped to a list of class codes for powers */
  private static final HashMap<String, String[]> sPowerMap = new HashMap<String, String[]>(MAX_CLASS);

  /** Class codes mapped to a list of boot coefficients */
  private static final HashMap<String, Long[]>   sBootsMap = new HashMap<String, Long[]  >(MAX_CLASS);

  /**
   * Add a mapping for a class code.
   * @param classCode map this ATLAS code, for example "18A"
   * @param classIndex map to this sequential, zero based number
   */
  private static void addClass(final String classCode, final Integer classIndex) {
    sClassMap.put(classCode, classIndex);
  }

  /**
   * Add a mapping for a power list.
   * @param classCode map this ATLAS code, for example "18A"
   * @param power a list of class codes for the powers
   */
  private static void addPower(final String classCode, final String[] power) {
    sPowerMap.put(classCode, power);
  }
  
  /**
   * Add a mapping for a boot coefficient list.
   * @param classCode map this ATLAS code, for example "18A"
   * @param boots a list of long coefficients for bootstrapping of the powers series
   */
  private static void addBoots(final String classCode, final long[] boots) {
    final Long[] bootL = new Long[boots.length];
    for (int i = 0; i < boots.length; ++i) {
        bootL[i] = boots[i];
    }
    sBootsMap.put(classCode, bootL);
  }
/*
  static { // 3 examples for testing
    addClass("1A", 0);      
    addPower("119AB", new String[] {"1A","119AB","119AB","119AB","119AB","119AB","119AB","17A","119AB","119AB"});
    addBoots("2A", new long[] {0, 4372, 96256, 1240002, 10698752, 74428120L});
  } // end of static block
*/
  static {
GFis
#----
while (<>) { # print body
    s/\s*\Z//; # chompre
    my ($add, $code, $param, $index) = split(/\t/);
    if (0) {
    } elsif ($add eq "Power") {
    	$param = "new String[] { $param }";
    } elsif ($add eq "Boots") {
    	$param = "new long[] { $param }";
    }
    print  "    add$add($code, $param); // $index\n";
} # while body
#----
print <<'GFis'; # trailer
  } // end of static block
  
  /**
   * Test method
   */
  public static void main(String[] args) {
    String classCode = "1A";
    System.out.println("class code: \"" + classCode + "\" -> " + sClassMap.get(classCode));
    
    System.out.print("power: \"" + classCode + "\" -> " );
    classCode = "119AB";
    final String[] powers = sPowerMap.get(classCode);
    String sep = "";
    for (int i = 0; i < powers.length; ++i) {
        System.out.print(sep + "\"" + powers[i] + "\"");
        sep = ",";
    }
    System.out.println();
    
    System.out.print("boots: \"" + classCode + "\" -> " );
    classCode = "2A";
    final Long[] boots = sBootsMap.get(classCode);
    sep = "";
    for (int i = 0; i < boots.length; ++i) {
        System.out.print(sep + boots[i]);
        sep = ",";
    }
    System.out.println();
  } // main
  
} // McKayThompsonTables
GFis
