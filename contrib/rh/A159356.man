A159356     Number of n X n arrays of squares of integers with every (n-1)X(n-1) subblock summing to 4      1
9, 767, 19252, 182643, 1036981, 4279949, 14199872, 40175697, 100665373, 229182711, 482835464, 954070027, 1786340817, 3194495053, 5490736316, 9117102929, 14685469857, 23026155487, 35246287308, 52799153171, 77565837469


size:=4;
center := proc(rest): size^2 + binomial(size^2,4) end:

all=
+center(4) # borders=0
+center(3)+Ls(1)
+center(2)+Ls(2)
+center(1)+Ls(3)
+       0 +Ls(4) # center=0
;
Ls:=proc(rest):
+1*bar(0,rest) # 0 zeroes in borders
+4*bar(1,rest) # 1 zero
+6*bar(2,rest)
+4*bar(3,rest)
+1*bar(4,rest) # all corners=0


  a bbb c
  h     d
  h     d
  h     d
  g fff e

  b+c+d = d+e+f = f+g+h = h+a+b
  b+c   =   e+f  (ex d)
  f+g   =   a+b  (ex h)
  d+e   =   g+h  (ex f)
  c+d   =   h+a  (ex b)

  b = e+f-c
  f = a+b-g
  d = g+h-e
  h = c+d-a

  a = f+g-b
  e = g+h-d
  g = a+b-f
  c = h+a-d

n=3
center 1x4, L 0               -> 1
center 1x1, L 3x1             -> 1
center 0,   L 4x1 (no, size(L)=3)
            L 1x4
            4=a=c=e=g         -> 1
            4=b=e=g, rotate 4 -> 4
            4=b=f,   rotate 2 -> 2
                            sum  9
#--------------
n=4, k=2
center 1x4, L0   -> k^2 = 4
center 4x1, L0   ->       1

center 0 L=1x4
  4 in a,c,e,g                          ->  1
  4 in b,e,g: 2 in b, 1 in eg, rot 4    ->  8
  4 in b,f = 2*2                        ->  4
  4 in d,h = 2*2                        ->  4

  L=1x1 same like center0,L1x4          -> 17
center 3x1, L1x1; C(k^2,3)4 * L1x1;     -> 68

L2x^1
  1 in a,c,e,g, 1 in b,f:k^2            ->  4
                1 in d,h:k^2            ->  4
  1 in g,e:1; 11 in b:1, 1 in f:k, rot4 ->  8
  11 in f => 11 in b:1
  11 in h => 11 in d:1                  ->  2
                                        -> 18
center 2x1, L2x1; C(k^2,2)6 * L2x1      ->108

center 1x1, L3x1 -> k^2 * L3x1 ->
  abc=1111=efg -> 1
  ahg=1111=cde -> 1
#------------------------
target := 4:
total := proc(n): local k; k := n-2: 
  + middle(k, 0,4) * border(k, 1,4)
  + middle(k, 1,4) * border(k, 0,4)
  + middle(k, 0,1) * border(k, 4,1)
  + middle(k, 1,1) * border(k, 3,1)
  + middle(k, 2,1) * border(k, 2,1)
  + middle(k, 3,1) * border(k, 1,1)
  + middle(k, 4,1) * border(k, 0,1)
  end ;
middle := proc(k, m,t): # multiplicity, term
  if k^2 <= m*t then 1 else binomial(k^2, m) fi end;
border := proc(k, m,t): # multiplicity, term
  if   m = 0 then 1
  else 
  if   t = 1 then
    if   m = 0 then 1
    elif m = 1 then 
      + corner(k, 0,0, 0,0, 1,1)
    elif m = 2 then 
      + corner(k, 0,0, 0,0, 2,1)
      + corner(k, 0,0, 1,1, 1,1)
    elif m = 3 then 
      + corner(k, 0,0, 0,0, 3,1)
      + corner(k, 0,0, 1,1, 2,1)
      + corner(k, 1,1, 1,1, 1,1)
    elif m = 4 then 
      + corner(k, 0,0, 0,0, 4,1)
      + corner(k, 0,0, 1,1, 3,1)
      + corner(k, 0,0, 2,1, 2,1)
      + corner(k, 1,1, 1,1, 2,1)
    fi
  elif t = 4 then
    if   m = 0 then 1
    elif m = 1 then 
      + corner(k, 0,0, 0,0, 1,4)
    fi
  fi
  end:
corner := proc(k, hm,ht, am,at, bm,bt): # multiplicity and terms of h, a, b
  if hm = 0 then
    if am = 0 then                  # 0, 0, b
      + hab(k, 0,0,   0,0,   bm,bt)
      + hab(k, 0,0,   bm,bt, 0,0  )
      + hab(k, bm,bt, 0,0,   0,0  )
    elif am = bm then               # 0, b, b
      + hab(k, 0,0,   bm,bt  bm,bt)
      + hab(k, bm,bt  bm,bt, 0,0  )
      + hab(k, bm,bt, 0,0,   bm,bt)
    else                            # 0, a, b
      + hab(k, 0,0,   am,at  bm,bt)
      + hab(k, am,at  bm,bt, 0,0  )
      + hab(k, am,at, 0,0,   bm,bt)
      + hab(k, 0,0,   bm,bt  am,at)
      + hab(k, bm,bt  am,at, 0,0  )
      + hab(k, bm,bt, 0,0,   am,at)
    fi 
  else                              # hm > 0
    1
  fi 
  end:
hab    := proc(k, hm,ht, am,at, bm,bt):
  if am > 1 then 0
  elif hm = 0 then 1
  else bar(k, hm,ht) * (hab1(k, bm,bt, am,at, hm,ht) + hab1(k, bm,bt, hm,ht, am,at))
  fi
  end:
hab1   := proc(k, hm,ht, am,at, bm,bt):
  if am > 1 then 0
  elif hm = 0 then 1
  else bar(k, hm,ht) * (hab2(k, bm,bt, am,at, hm,ht) + hab2(k, bm,bt, hm,ht, am,at))
  fi
  end:
hab2   := proc(k, hm,ht, am,at, bm,bt):
  if am > 1 then 0
  elif hm = 0 then 1
  else bar(k, hm,ht) * (hab3(k, bm,bt, am,at, hm,ht) + hab3(k, bm,bt, hm,ht, am,at))
  fi
  end:
hab3   := proc(k, hm,ht, am,at, bm,bt):
  if am > 1 then 0
  elif hm = 0 then 1
  else bar(k, hm,ht) * hab3(k, bm,bt, am,at, hm,ht) + hab3(k, bm,bt, hm,ht, am,at)
  fi
  end:
bar    := proc(k, hm,ht):
  if hm > k then 0 else binomial(k, hm) fi
  end:
seq(total(n), n=3..10);
