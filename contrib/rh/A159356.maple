# read "C://Users/User/work/gits/OEIS-mat/contrib/rh/A159356.maple"
total := proc(n): local k; k := n-2: 
  # distribute each possible partition between middle and borders
  +                  border(k, 1,4)
  + middle(k, 1,4) 
  +                  border(k, 4,1)
  + middle(k, 1,1) * border(k, 3,1)
  + middle(k, 2,1) * border(k, 2,1)
  + middle(k, 3,1) * border(k, 1,1)
  + middle(k, 4,1) 
  end: # total
  
middle := proc(k, m,t): # multiplicity, term
  # select m locations in the center
  result := (
  if k^2 >= m then 
    binomial(k^2, m) 
  else
    0
  fi 
    ); printf("middle(k=%a, %a,%a)=%a\n", k,m,t, result): result
  end: # middle

border := proc(k, m,t): # multiplicity, term
  # distribute the partition into 3 bins: h(k), a(1), b(k)
  result := (
    if m = 1 then 
      + 2*k^2 + 4*k + 1
    elif m = 2 then 
      + corners(k, 0,0, 0,0, 2,1)
      + corners(k, 0,0, 1,1, 1,1)
    elif m = 3 then 
      + corners(k, 0,0, 0,0, 3,1)
      + corners(k, 0,0, 1,1, 2,1)
      + corners(k, 1,1, 1,1, 1,1)
    elif m = 4 then 
      + corners(k, 0,0, 0,0, 4,1)
      + corners(k, 0,0, 1,1, 3,1)
      + corners(k, 0,0, 2,1, 2,1)
      + corners(k, 1,1, 1,1, 2,1)
    fi
    ); printf("border(k=%a, %a,%a)=%a\n", k,m,t, result): result
  end: # border

corners := proc(k, hm,ht, am,at, bm,bt): # multiplicity and terms of h, a, b
  if hm > k or am > k or bm > k then 0
  elif hm = 0 then
    if am = 0 then                   # 0, 0, b
        + 4*binomial(k, bm)          # 4 triangles
        + 2*binomial(k, bm)^2        # 2 bars     
        + 1                          # 1 square  
    elif am = bm then                # 0, b, b
        + 4*binomial(k, bm)^3        # 4 triangles
        + 2*binomial(k, bm)^2        # 2 double bars
        + 1*binomial(k, bm)^4        # 1 diamond 
    else                             # 0, a, b
        + 4*(binomial(k, bm)^2 * binomial(k, am)) # 4 triangles
        + 2* binomial(k, bm)^2       # 2 squares
        + 2*(binomial(k, bm)^2 * binomial(k, am)^2) # 2 crosses
    fi 
  elif hm = am then                  # h, h, b
    if am = bm then
        2*k^2 + 4*k + 1              # 4 triangles, 2 bars, 1 square
    else 
        + 4*binomial(k, bm)^2*k      # 4 triangles
        + 2*binomial(k, bm)^2        # 2 squares
        + 2*binomial(k, bm)^2*k^2    # 2 crosses
    fi
  else 
    printf("error 1\n");
    0
  fi 
  end: # corners

seq(total(n), n=3..5);
