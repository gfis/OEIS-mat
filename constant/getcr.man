# A196609	DecimalExpansionSequence	Decimal expansion of the least x>0 satisfying 1=x*cos(4*x).	nonn,cons,synth	1..100	decsolv
# A196610	null	Decimal expansion of the number c for which the curve y = c*cos(x) is tangent to the curve y = 1/x, and 0 < x < 2*Pi.	nonn,cons,changed,synth	1..100	nyi
# A196611	null	Decimal expansion of the slope (negative) of the tangent line at the point of tangency of the curves y=c*cos(x) and y=1/x, where c is given by A196610.	nonn,cons,synth	1..100	nyi
# 
# A196618	null	Decimal expansion of cos(x), where x is the least positive solution of 1 = (x^2)*cos(x).	nonn,cons,	0..10000	nyi
# A196619	null	Decimal expansion of the number c for which the curve y=cos(x) is tangent to the curve y=(1/x)-c, and 0<x<2*Pi.	nonn,cons,	0..10000	nyi
# A196620	null	Decimal expansion of the slope (negative) of the tangent line at the point of tangency of the curves y=cos(x) and y=(1/x)-c, where c is given by A196619.	nonn,cons,	0..10000	nyi
# 
#:# A196618	getcr1	0	A196617	super.getCR().cos()
#:# A196619	getcr2	0	A196617	super.getCR()	xt.inverse().subtract(xt.cos())
#:# A196620	getcr1	0	A196617	super.getCR().sin()

# A196757	DecimalExpansionSequence	Decimal expansion of the least x>0 satisfying 1=6x*sin(x).	nonn,cons,synth	0..99	decsolv
# A196758	null	Decimal expansion of the number c for which the curve y=1/x is tangent to the curve y=c*sin(x), and 0 < x < 2*Pi.	nonn,cons,changed,synth	0..98	nyi
# A196759	null	Decimal expansion of the slope (negative) at the point of tangency of the curves y=1/x and y=c*sin(x), where c is given by A196758.	nonn,cons,changed,synth	0..99	nyi
# 
# A196764	DecimalExpansionSequence	Decimal expansion of the least x>0 satisfying 6=x*sin(x).	nonn,cons,synth	1..100	decsolv
# A196765	null	Decimal expansion of the positive number c for which the curve y=c/x is tangent to the curve y=sin(x), and 0 < x < 2*Pi.	nonn,cons,synth	1..105	nyi
# A196766	null	Decimal expansion of the slope (negative) at the point of tangency of the curves y=c/x and y=sin(x), where c is given by A196765.	nonn,cons,changed,synth	0..98	nyi
# 
# A196773	DecimalExpansionSequence	Decimal expansion of the least number x>0 satisfying -1=(x^2)*cos(x).	nonn,cons,synth	1..100	decsolv
# A196774	null	Decimal expansion of the number c for which the curve y=c+1/x is tangent to the curve y=sin(x), and 0 < x < 2*Pi.	nonn,cons,changed,synth	0..98	nyi
# A196775	null	Decimal expansion of the slope (negative) at the point of tangency of the curves y=c+1/x and y=sin(x), where c is given by A196774.	nonn,cons,changed,synth	0..99	nyi
# 
# A196822	null	Decimal expansion of the number x satisfying 2*x = (1+x^2)*sin(x) and 0 < x < 2*Pi.	nonn,cons,changed,synth	0..99	nyi
# A196823	null	Decimal expansion of the number c for which the curve y=1/(1+x^2) is tangent to the curve y=-c+cos(x), and 0<x<2*Pi.	nonn,cons,synth	0..99	nyi
# A196824	null	Decimal expansion of the slope (negative) at the point of tangency of the curves y=1/(1+x^2) and y=-c+cos(x), where c is given by A196774.	nonn,cons,changed,synth	0..99	nyi
#:# A196823	getcr2	0	A196822	super.getCR()	xt.multiply(xt).add(CR.ONE).inverse().subtract(xt.cos()).negate()
#:# A196824	getcr1	0	A196822	super.getCR().sin()
# 
# A196831	null	Decimal expansion of the number x satisfying 0 < x < 2*Pi and x^2 + 2*x*tan(x) + 1 = 0.	nonn,cons,changed,synth	1..100	nyi
# A196832	null	Decimal expansion of the number c for which the curve y=1/(1+x^2) is tangent to the curve y=c*sin(x), and 0 < x < 2*Pi.	nonn,cons,changed,synth	0..99	nyi
# A196833	null	Decimal expansion of the slope (negative) at the point of tangency of the curves y=1/(1+x^2) and y=c*sin(x), where c is given by A196832.	nonn,cons,changed,synth	0..99	nyi
# 
# A196913	null	Decimal expansion of the number x satisfying 0 < x < 2*Pi and 2x = (1 + x^2)*tan(x).	nonn,cons,changed,synth	0..99	nyi
# A196914	null	Decimal expansion of the number c for which the curve y=1/(1+x^2) is tangent to the curve y=c*cos(x), and 0 < x < 2*Pi.	nonn,cons,changed,synth	0..98	nyi
# A196915	null	Decimal expansion of the slope (negative) at the point of tangency of the curves y=1/(1+x^2) and y=c*cos(x), where c is given by A196914.	nonn,cons,changed,synth	0..98	nyi

#:# A317202	getcr2	0	A192918	super.getCR()	xt.multiply(xt).add(xt.pow(4)).divide(CR.TWO).add(CR.THREE)

# 2021-08-11
A179374	getcr1	0	A179373	super.getCR().multiply(CR.valueOf(180)).divide(CR.PI)
A179375	getcr1	0	A179373	super.getCR().divide(CR.TWO).sin().multiply(CR.TWO)
A179376	getcr1	0	A179373	CR.ONE.subtract(super.getCR().divide(CR.TWO).cos())	1 - cos(solve(x=0, Pi, x-sin(x)-2)/2)
A179377	getcr1	0	A179373	super.getCR().divide(CR.TWO).cos()	1 - cos(solve(x=0, Pi, x-sin(x)-2)/2)
A179378	getcr1	0	A179373	super.getCR().sin().divide(CR.TWO)	sin(solve(x=0, Pi, x-sin(x)-2))/2
#?? A210462	getcr2	0	A075778	super.getCR()	CR.HALF.add(xt.multiply(CR.TWO).multiply(xt.add(CR.ONE))).inverse()	Equals 1/2 + 1/(2*A075778*(A075778+1)).
# A210462	getcr2	0	A075778	super.getCR()	xt.inverse().subtract(new A210462().getCR().pow(2)).sqrt()	sqrt(1/A075778-A210462^2)
# A215833	getcr1	0	A215832	super.getCR().inverse()
A222183	getcr1	0	A006752	super.getCR().multiply(CR.EIGHT).add(CR.PI.pow(2)).divide(CR.valueOf(16))	(8*Catalan + Pi^2)/16
A097469	getcr1	0	A006752	super.getCR().divide(CR.PI).exp()	exp(Catalan/Pi)	, with G = A006752 (Catalan's constant)
A229728	getcr1	0	A006752	super.getCR().multiply(CR.FOUR).divide(CR.PI).exp()	exp(4*Catalan/Pi)
A242822	getcr1	0	A006752	super.getCR().multiply(CR.EIGHT).inverse().multiply(CR.PI.pow(2))	Pi^2/(8*G)
A244238	getcr1	0	A006752	super.getCR().multiply(CR.EIGHT).divide(CR.THREE.multiply(CR.PI)).exp()	exp(8*G/(3*Pi))
A247036	getcr1	0	A006752	super.getCR().multiply(CR.TWO).divide(CR.PI.multiply(CR.TWO.log()))	2*G/(Pi*log(2))
A247037	getcr1	0	A006752	CR.PI.pow(2).divide(CR.valueOf(16)).subtract(super.getCR().divide(CR.TWO))	Pi^2/16 - G/2

A242000	getcr1	0	A065442	super.getCR().add(CR.ONE).divide(CR.FOUR)	(1+alpha)/4, a constant appearing in Koecher''s formula for Euler''s gamma constant, where alpha is , the ErdÅ‘s-Borwein Constant.
# A244263	getcr1	0	A244263	super.getCR().pow(2).inverse().add(CR.ONE).sqrt()
# A244928	getcr1	0	A006752	super.getCR().2/3*G + Pi/12*log(2-sqrt(3))
# A244929	getcr1	0	A006752	super.getCR().2/3*G + 5*Pi/12*log(2+sqrt(3))
# A245286	getcr1	0	(1/a*(3^(1/4) + 3^(-3/4)))^(1/2), where a is the smallest positive root of x^8 - 6*x^4 - 8*x^2 + 1
# A245287	getcr1	0	Root[x^4 - 2*x^2 - 4*x + 1, 1]; RealDigits[(2/b)^(1/2)
# A245324	getcr1	0	(3/2)*log(theta0), where theta0 = root of x^3 - x - 1
A224268	getcr1	0	A085565	super.getCR().divide(CR.TWO.sqrt())	/sqrt(2)
A245772	getcr1	0	A224273	super.getCR().log().multiply(CR.HALF)	(1/2)*log(A224273)
A246673	getcr2	0	A246672	super.getCR()	xt.multiply(CR.TWO).divide(xt.add(CR.TWO))
#?? A246771	getcr2	0	A246770	super.getCR()	xt.exp().inverse().multiply(CR.TWO).divide(CR.valueOf(135)).multiply(CR.FOUR.subtract(xt.pow(3).subtract(xt.pow(2).multiply(CR.valueOf(45)))))	(2/135)*exp(-beta)*(4 - 45*beta^2 + 45*beta^3), where beta = A246770 
A247038	getcr1	0	A002210	super.getCR().log().multiply(CR.TWO.log())	log(2)*log(K), where K is Khinchin's constant A002210
A247677	getcr1	0	A006752	super.getCR().multiply(CR.FOUR).multiply(CR.PI).subtract(CR.PI.pow(2).multiply(CR.TWO.log()))	4*Pi*Catalan - Pi^2*log(2)
A247685	getcr1	0	A006752	super.getCR().multiply(CR.FOUR)	4*Catalan
# A248413	getcr1	0	theta_1 = 4*arctan(sqrt(x1)), where x1 is the second smallest positive root of x^10 + 65*x^9 - 2139*x^8 + 20476*x^7 - 78054*x^6 + 126214*x^5 - 78054*x^4 + 20476*x^3 - 2139*x^2 + 65*x + 1
# A248411	getcr1	0	b = (2 + x - sqrt(x^2 + x + 1))/sqrt(3), where x is the positive root of 128*x^6 + 456*x^5 + 783*x^4 + 764*x^3 + 408*x^2 + 108*x - 28.
# A248414	getcr1r	0	A248413	REALS.asin(super.getCR().cos().multiply(CR.TWO)).multiply(CR.TWO)	theta_2 = 2*arcsin(2*cos(theta_1)), where theta_1 is A248413
# A248415	getcr1	0	2*Pi - 2 theta_1 - theta_2 + 2*tan(theta_1/2) + sec(theta_2/2) - cos(theta_2/2) + tan(theta_1/2)*sin(theta_2/2), where theta_1 is A248413 and theta_2 A248414
A248916	getcr1	0	A033259	super.getCR().pow(2).multiply(CR.EIGHT)	8*lambda^2, lambda is Laplace''s limit constant A033259
A249136	getcr1	0	A033259	super.getCR().multiply(CR.EIGHT.sqrt())	sqrt(8)*lambda, where lambda is A033259
A249137	getcr1r	0	A033259	REALS.sinh(super.getCR().pow(2).add(CR.ONE).sqrt()).multiply(CR.TWO.sqrt())	sqrt(2)*sinh(sqrt(lambda^2 + 1)), where lambda is A033259
A254794	getcr1	0	A062539	super.getCR().pow(2).divide(CR.PI)	L^2/Pi where L is the lemniscate constant A062539
# A240969	getcr1	0	phi = ArcSin[1/6 + (4/3)*Sin[(1/3 )*ArcSin[17/64]]]; psi = ArcTan[(1/2)*Sec[phi]]; beta = (1/2)*(Pi/2 - phi - 2*psi + Tan[phi] + Tan[psi])^(-1)

