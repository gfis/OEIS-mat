#!perl

# Combine 2 lines in one seq4 record
# @(#) $Id$
# 2024-06-05, Georg Fischer: copied from expr_join.pl
#
#:# Usage:
#:#   perl dex_join.pl [-d debug] input > output.seq4
#--------------------------------------------------------
use strict;
use integer;
use warnings;
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime (time);
my $timestamp = sprintf ("%04d-%02d-%02d %02d:%02d", $year + 1900, $mon + 1, $mday, $hour, $min);
my $pwd = `pwd`;
$pwd =~ m{(/OEIS\-mat\S*)};
print "# Generated by ..$1/$0 at $timestamp\n";
if (0 && scalar(@ARGV) == 0) {
    print `grep -E "^#:#" $0 | cut -b3-`;
    exit;
}
my $debug = 0;
while (scalar(@ARGV) > 0 and ($ARGV[0] =~ m{\A[\-\+]})) {
    my $opt = shift(@ARGV);
    if (0) {
    } elsif ($opt  =~ m{d}) {
        $debug     = shift(@ARGV);
    } else {
        die "invalid option \"$opt\"\n";
    }
} # while $opt

my ($aseqno, $callcode, $offset, $expr);
$callcode = "decexp";
while (<>) {
    s/\s+\Z//; # chompr
    my $line = $_;
    if (0) {
    } elsif ($line =~ m{public class (A\d+)}) {
        $aseqno = $1;
    } elsif ($line =~ m{super\((.*)}) {
        $expr = $1;
        $offset = 1;
        my $base = 10;
        if ($expr =~ s{\, *(\d+)\)\;\Z}{}) {
            $base = $1;
        }
        if ($expr =~ s{ *(\-?\d+) *\, *}{}) {
            $offset = $1;
        }
        if ($expr !~ m{\{}) {
            $expr =~ s{\)\;\Z}{};
            print        join("\t", $aseqno, "X", $offset, $expr) ."\n";
        } else {
            print        join("\t", $aseqno, "U", $offset, $expr) ."\n";
        }
    }
} # while
__DATA__
public class A229495 extends DecimalExpansionSequence {
    super(1, CR.ONE.exp().divide(CR.TWO.multiply(CR.PI).sqrt()));
public class A229553 extends DecimalExpansionSequence {
    super(1, new UnaryCRFunction() { 
public class A229759 extends DecimalExpansionSequence {
    super(CR.valueOf(25).subtract(CR.TEN.multiply(CR.FIVE.sqrt())).divide(CR.TWO));
public class A365066 extends DecimalExpansionSequence {
    super(0, new CR() {
